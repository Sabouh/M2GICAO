<Gratin type="node">
 <int val="0" name="majorVersion"/>
 <int val="3" name="minorVersion"/>
 <string val="imgGenericId" name="coreHandleStringId"/>
 <uint val="1" name="coreHandleVersion"/>
 <string val="lineIntegralConvID" name="nodeStringId-0"/>
 <uint val="1" name="nodeVersion-0"/>
 <string val="lineIntegralConv" name="nodeName-0"/>
 <string val="Visualization/" name="nodePath-0"/>
 <string val="Line Integral Convolution (LIC) [Cabral and Leedom SIGGRAPH 1993]" name="nodeDesc-0"/>
 <string val="Basic implementation of the LIC technique: &#xa;&quot;Imaging Vector Fields Using Line Integral Convolution&quot; [Cabral and Leedom SIGGRAPH 1993]. &#xa;The line integral convolution smoothes input data along a given flow field. &#xa;The first input is usually a random noise (to better see the flow) or sometimes an image for NPR abstractions. &#xa;The second input is the flow field (the guide - that should be in the 2 first channel of the texture). &#xa;The scale parameter rescales the flow magnitude. &#xa;Increase the size to increase the blur. &#xa;The input flow is not renormalized. Be sure to provide a proper input flowField.&#xa;Note also that the alpha value is kept unchanged here. " name="nodeHelp-0"/>
 <uint val="5" name="nodeId-0"/>
 <uint val="0" name="nodeGraphId-0"/>
 <vector2f name="nodePos-0">
  <float val="3540.53" name="0"/>
  <float val="281.157" name="1"/>
 </vector2f>
 <int val="2" name="nodeInputNameSize-0"/>
 <int val="1" name="nodeOutputNameSize-0"/>
 <string val="image" name="nodeInputName-0-0"/>
 <string val="flowField" name="nodeInputName-0-1"/>
 <string val="flowLic" name="nodeOutputName-0-0"/>
 <bool val="1" name="nodeHasWidget-0"/>
 <IOData name="node-0">
  <string val="410" name="genericGlslVersion"/>
  <string val="lineIntegralConv" name="genericNodeName"/>
  <bool val="0" name="genericUseVertex"/>
  <bool val="0" name="genericUseTesselation"/>
  <bool val="0" name="genericUseGeometry"/>
  <bool val="1" name="genericUseFragment"/>
  <int val="9729" name="genericOutFilter"/>
  <int val="33071" name="genericOutWrap"/>
  <bool val="0" name="genericUseDepthTest"/>
  <bool val="0" name="genericUseBlending"/>
  <uint val="513" name="genericDepthFunc"/>
  <uint val="1" name="genericBlendSrc"/>
  <uint val="0" name="genericBlendDst"/>
  <vector4f name="genericBackground">
   <float val="0" name="0"/>
   <float val="0" name="1"/>
   <float val="0" name="2"/>
   <float val="0" name="3"/>
  </vector4f>
  <string val="#version 410&#xa;&#xa;layout(location = 0) in vec2 vertex;&#xa;layout(location = 1) in vec2 coord;&#xa;uniform sampler2D image;&#xa;uniform sampler2D flowField;&#xa;uniform float scale;&#xa;uniform int size;&#xa;" name="genericVertHead"/>
  <string val="out vec2 texcoord;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = vec4(vertex,0,1);&#xa;&#x9;texcoord    = coord;&#xa;}&#xa;" name="genericVertBody"/>
  <string val="#version 410&#xa;&#xa;layout(location = 0) out vec4 flowLic;&#xa;uniform sampler2D image;&#xa;uniform sampler2D flowField;&#xa;uniform float scale;&#xa;uniform int size;&#xa;" name="genericFragHead"/>
  <string val="in vec2 texcoord;&#xa;&#xa;vec2 ps = 1./vec2(textureSize(image,0));&#xa;&#xa;vec2 flow(in vec2 p) {&#xa;&#x9;vec2 f = texture(flowField,p).xy*scale;&#xa;&#x9;if(length(f)>1.) return normalize(f);&#xa;&#x9;return f;&#xa;}&#xa;&#xa;vec2 nextFlow(in vec2 p,in vec2 pf) {&#xa;&#x9;vec2 nf = flow(p);&#xa;&#x9;return dot(nf,pf)&lt;0. ? -nf : nf;&#xa;}&#xa;&#xa;vec4 val(in vec2 p) {&#xa;&#x9;return texture(image,p);&#xa;}&#xa;&#xa;vec4 lic(in vec2 p) {&#xa;&#x9;vec2 c1 = p;&#xa;&#x9;vec2 c2 = p;&#xa;&#x9;vec2 f1 = flow(p);&#xa;&#x9;vec2 f2 = -f1;&#xa;&#x9;&#xa;&#x9;vec4 r = val(c1);&#xa;&#x9;float a = r.w;&#xa;&#x9;float s = 1.;&#xa;&#x9;&#xa;&#x9;for(int i=0;i&lt;size;++i) {&#xa;&#x9;&#x9;c1 += f1*ps;&#xa;&#x9;&#x9;c2 += f2*ps;&#xa;&#xa;&#x9;&#x9;r += val(c1);&#xa;&#x9;&#x9;r += val(c2);&#xa;&#x9;&#x9;s += 2.;&#x9;&#x9;&#xa;&#xa;&#x9;&#x9;f1 = nextFlow(c1,f1);&#xa;&#x9;&#x9;f2 = nextFlow(c2,f2);&#xa;&#x9;}&#xa;&#x9;&#xa;&#x9;return vec4(r.xyz/s,a);&#xa;}&#xa;&#xa;void main() {&#xa;&#x9;flowLic = lic(texcoord);&#xa;}&#xa;" name="genericFragBody"/>
  <string val="#version 410&#xa;&#xa;layout(vertices = 4) out;&#xa;uniform sampler2D image;&#xa;uniform sampler2D flowField;&#xa;uniform float scale;&#xa;uniform int size;&#xa;" name="genericTessCHead"/>
  <string val="void main(void) {&#xa;&#x9;gl_TessLevelOuter[0] = 1;&#xa;&#x9;gl_TessLevelOuter[1] = 1;&#xa;&#x9;gl_TessLevelOuter[2] = 1;&#xa;&#x9;gl_TessLevelOuter[3] = 1;&#xa;&#x9;gl_TessLevelInner[0] = 1;&#xa;&#x9;gl_TessLevelInner[1] = 1;&#xa;&#x9;gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;&#xa;}&#xa;" name="genericTessCBody"/>
  <string val="#version 410&#xa;&#xa;uniform sampler2D image;&#xa;uniform sampler2D flowField;&#xa;uniform float scale;&#xa;uniform int size;&#xa;" name="genericTessEHead"/>
  <string val="layout(quads,equal_spacing) in;&#xa;&#xa;void main() {&#xa;&#x9;vec4 p1 = mix(gl_in[0].gl_Position,gl_in[1].gl_Position,gl_TessCoord.x);&#xa;&#x9;vec4 p2 = mix(gl_in[3].gl_Position,gl_in[2].gl_Position,gl_TessCoord.x);&#xa;&#x9;gl_Position = mix(p1,p2,gl_TessCoord.y);&#xa;}&#xa;" name="genericTessEBody"/>
  <string val="#version 410&#xa;&#xa;layout(triangles) in;&#xa;uniform sampler2D image;&#xa;uniform sampler2D flowField;&#xa;uniform float scale;&#xa;uniform int size;&#xa;" name="genericGeomHead"/>
  <string val="layout(triangle_strip, max_vertices = 3) out;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = gl_in[0].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[1].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[2].gl_Position; EmitVertex();&#xa;&#x9;EndPrimitive();&#xa;}" name="genericGeomBody"/>
  <vector2f name="genericTSize">
   <float val="1" name="0"/>
   <float val="1" name="1"/>
  </vector2f>
  <vector2f name="genericTOffset">
   <float val="0" name="0"/>
   <float val="0" name="1"/>
  </vector2f>
  <bool val="0" name="genericNeedMouse"/>
  <bool val="0" name="genericNeedKeyboard"/>
  <uint val="2" name="genericNbWidgets"/>
  <int val="0" name="genericWidgetType-0"/>
  <int val="1" name="genericWidgetView-0"/>
  <string val="scale" name="genericWidgetName-0"/>
  <bool val="1" name="genericWidgetKeyframed-0"/>
  <int val="1" name="genericWidgetType-1"/>
  <int val="1" name="genericWidgetView-1"/>
  <string val="size" name="genericWidgetName-1"/>
  <bool val="1" name="genericWidgetKeyframed-1"/>
 </IOData>
 <IOData name="nodeWidget-0">
  <uint val="2" name="nbChildren"/>
  <IOData name="childWidget-0">
   <bool val="1" name="floatAttribKeyframed"/>
   <float val="0" name="floatAttribMinVal"/>
   <float val="100" name="floatAttribMaxVal"/>
   <IOData name="floatAttribCurve">
    <float val="1" name="currentVal"/>
    <uint val="1" name="nbCurves"/>
    <IOData name="curve-0">
     <int val="0" name="interpType"/>
     <int val="0" name="leftType"/>
     <int val="0" name="rightType"/>
     <IOData name="interpolator">
      <uint val="1" name="nbPoints"/>
      <uint val="0" name="nbTangents"/>
      <vector2f name="controlPoint-0">
       <float val="0" name="0"/>
       <float val="1" name="1"/>
      </vector2f>
     </IOData>
    </IOData>
   </IOData>
   <uint val="0" name="nbChildren"/>
  </IOData>
  <IOData name="childWidget-1">
   <bool val="1" name="intAttribKeyframed"/>
   <int val="0" name="intAttribMinVal"/>
   <int val="50" name="intAttribMaxVal"/>
   <IOData name="intAttribCurve">
    <int val="10" name="currentVal"/>
    <uint val="1" name="nbCurves"/>
    <IOData name="curve-0">
     <int val="0" name="interpType"/>
     <int val="0" name="leftType"/>
     <int val="0" name="rightType"/>
     <IOData name="interpolator">
      <uint val="1" name="nbPoints"/>
      <uint val="0" name="nbTangents"/>
      <vector2f name="controlPoint-0">
       <float val="0" name="0"/>
       <float val="10" name="1"/>
      </vector2f>
     </IOData>
    </IOData>
   </IOData>
   <uint val="0" name="nbChildren"/>
  </IOData>
 </IOData>
 <vector2f name="nodeInputPos-0-0">
  <float val="56.32" name="0"/>
  <float val="28.16" name="1"/>
 </vector2f>
 <vector2f name="nodeInputPos-0-1">
  <float val="56.32" name="0"/>
  <float val="28.16" name="1"/>
 </vector2f>
 <vector2f name="nodeOutputPos-0-0">
  <float val="56.32" name="0"/>
  <float val="28.16" name="1"/>
 </vector2f>
</Gratin>
