<Gratin type="node">
 <int val="0" name="majorVersion"/>
 <int val="3" name="minorVersion"/>
 <string val="_GRATIN_GROUPED_NODES_ID_" name="coreHandleStringId"/>
 <uint val="1" name="coreHandleVersion"/>
 <string val="_GRATIN_GROUPED_NODES_ID_" name="nodeStringId-0"/>
 <uint val="1" name="nodeVersion-0"/>
 <string val="tmoMeanStd" name="nodeName-0"/>
 <string val="Imaging/tonemap/" name="nodePath-0"/>
 <string val="Reshape the histogram so that its mean/std are equal to 0.5 and 1/3. " name="nodeDesc-0"/>
 <string val="Histogram resshaping based on mean and standard deviation values. &#xa;The output image has a mean of 0.5 and a standard deviation of 1/3&#xa;so that most pixels stay in the range 0,1.&#xa;The formula is the following: &#xa;(col-mean)/(std*3)+0.5,&#xa;where mean and std are the original mean and std. &#xa;Note: output values are not clamped." name="nodeHelp-0"/>
 <uint val="8" name="nodeId-0"/>
 <uint val="0" name="nodeGraphId-0"/>
 <vector2f name="nodePos-0">
  <float val="816.159" name="0"/>
  <float val="-4225.04" name="1"/>
 </vector2f>
 <int val="1" name="nodeInputNameSize-0"/>
 <int val="1" name="nodeOutputNameSize-0"/>
 <string val="image" name="nodeInputName-0-0"/>
 <string val="toneMap" name="nodeOutputName-0-0"/>
 <bool val="1" name="nodeHasWidget-0"/>
 <IOData name="node-0">
  <uint val="3" name="nbNodes"/>
  <string val="globalMeanColorID" name="nodeStringId-0"/>
  <uint val="1" name="nodeVersion-0"/>
  <string val="globalMeanColor" name="nodeName-0"/>
  <string val="Analysis/global" name="nodePath-0"/>
  <string val="Mean color of an image" name="nodeDesc-0"/>
  <string val="Compute the mean color of an image. &#xa;The resulting color is stored in the last level of the output pyramid. &#xa;It can be accessed via the following formula: &#xa;&#xa;vec2 s = vec2(textureSize(image,0)); &#xa;float l = 1. + floor(log2(max(s.x,s.y))); &#xa;vec4 color = textureLod(image,vec2(.5),l); " name="nodeHelp-0"/>
  <uint val="0" name="nodeId-0"/>
  <uint val="0" name="nodeGraphId-0"/>
  <vector2f name="nodePos-0">
   <float val="-972.699" name="0"/>
   <float val="213.905" name="1"/>
  </vector2f>
  <int val="1" name="nodeInputNameSize-0"/>
  <int val="1" name="nodeOutputNameSize-0"/>
  <string val="image" name="nodeInputName-0-0"/>
  <string val="meanColor" name="nodeOutputName-0-0"/>
  <string val="globalVarianceColorID" name="nodeStringId-1"/>
  <uint val="1" name="nodeVersion-1"/>
  <string val="globalVarianceColor" name="nodeName-1"/>
  <string val="Analysis/global" name="nodePath-1"/>
  <string val="Variance color of an image" name="nodeDesc-1"/>
  <string val="Compute the variance color of an image (only RGB channels). &#xa;&#xa;The input must be the output pyramid obtained with the node globalMeanColor.&#xa;&#xa;The resulting color is stored in the last level of the output pyramid. &#xa;It can be accessed via the following formula: &#xa;&#xa;vec2 s = vec2(textureSize(image,0)); &#xa;float l = 1. + floor(log2(max(s.x,s.y))); &#xa;vec4 color = textureLod(image,vec2(.5),l); &#xa;&#xa;// standard deviation&#xa;color = sqrt(color);" name="nodeHelp-1"/>
  <uint val="1" name="nodeId-1"/>
  <uint val="0" name="nodeGraphId-1"/>
  <vector2f name="nodePos-1">
   <float val="-1.10541" name="0"/>
   <float val="-262.655" name="1"/>
  </vector2f>
  <int val="1" name="nodeInputNameSize-1"/>
  <int val="1" name="nodeOutputNameSize-1"/>
  <string val="globalMeanPyramid" name="nodeInputName-1-0"/>
  <string val="varianceColor" name="nodeOutputName-1-0"/>
  <string val="imgGenericId" name="nodeStringId-2"/>
  <uint val="1" name="nodeVersion-2"/>
  <string val="tmoMeanStd" name="nodeName-2"/>
  <string val="Basic/" name="nodePath-2"/>
  <string val="Generic node for image processing" name="nodeDesc-2"/>
  <string val="This node was designed to create custom shaders&#xa;The settings widget allows to modify input, output parameters&#xa;as well as the output image sizes.&#xa;&#xa;WARNING1: you will be able to modify the number of inputs/outputs&#xa;only if the node is entirely disconnected.&#xa;WARNING2: input/output names will not be modified if a custom node is created&#xa;from this node because these names should be edited directly in the setting widget&#xa;WARNING3: modifying the settings of a node will remove all previously&#xa;defined keyframes&#xa;&#xa;* Special data allows to modify the output image (using a multiple of&#xa;the input size, plus an offset vector&#xa;Check use mouse/keyboard if you want to interact with the mouse&#xa;&#xa;* Input data allows to add/remove/displace input data (only if disconnected)&#xa;&#xa;* Output data allows to add/remove/displace output data (only if disconnected)&#xa;&#xa;* Param data allows to add/remove parameters that will automatically be &#xa;included in your shader.&#xa;For each of them you may choose a proper name, type, and min/max/default values.&#xa;Check keyframes if you want your parameter to be accessible&#xa; through the animation widget&#xa;&#xa;In the node interface itself:&#xa;Source tab contains the head and body of your GLSL source (only the body is editable)&#xa;Params tab contains the defined widgets according to your setting choices&#xa;Log tab contains compilation errors&#xa;&#xa;Once your settings and source completed, click on apply to see the result&#xa;" name="nodeHelp-2"/>
  <uint val="2" name="nodeId-2"/>
  <uint val="0" name="nodeGraphId-2"/>
  <vector2f name="nodePos-2">
   <float val="973.804" name="0"/>
   <float val="48.751" name="1"/>
  </vector2f>
  <int val="2" name="nodeInputNameSize-2"/>
  <int val="1" name="nodeOutputNameSize-2"/>
  <string val="meanPyramid" name="nodeInputName-2-0"/>
  <string val="variancePyramid" name="nodeInputName-2-1"/>
  <string val="toneMap" name="nodeOutputName-2-0"/>
  <uint val="1" name="nbConnections-0-1"/>
  <vector2u name="connection-0-1-0">
   <uint val="0" name="0"/>
   <uint val="0" name="1"/>
  </vector2u>
  <uint val="1" name="nbConnections-0-2"/>
  <vector2u name="connection-0-2-0">
   <uint val="0" name="0"/>
   <uint val="0" name="1"/>
  </vector2u>
  <uint val="1" name="nbConnections-1-2"/>
  <vector2u name="connection-1-2-0">
   <uint val="0" name="0"/>
   <uint val="1" name="1"/>
  </vector2u>
  <bool val="1" name="nodeHasWidget-0"/>
  <IOData name="node-0">
   <int val="0" name="processMode"/>
   <string val="410" name="genericGlslVersion"/>
   <string val="globalMeanColor" name="genericNodeName"/>
   <bool val="0" name="genericUseVertex"/>
   <bool val="0" name="genericUseTesselation"/>
   <bool val="0" name="genericUseGeometry"/>
   <bool val="1" name="genericUseFragment"/>
   <int val="9728" name="genericOutFilter"/>
   <int val="33071" name="genericOutWrap"/>
   <bool val="0" name="genericUseDepthTest"/>
   <bool val="0" name="genericUseBlending"/>
   <uint val="513" name="genericDepthFunc"/>
   <uint val="1" name="genericBlendSrc"/>
   <uint val="0" name="genericBlendDst"/>
   <vector4f name="genericBackground">
    <float val="0" name="0"/>
    <float val="0" name="1"/>
    <float val="0" name="2"/>
    <float val="0" name="3"/>
   </vector4f>
   <string val="#version 410&#xa;&#xa;layout(location = 0) in vec2 vertex;&#xa;layout(location = 1) in vec2 coord;&#xa;uniform sampler2D image;&#xa;uniform sampler2D prevLevel0;&#xa;uniform int nbLevels;&#xa;uniform int numLevel;&#xa;uniform bool isFinest;&#xa;uniform bool isCoarsest;&#xa;" name="genericVertHead"/>
   <string val="out vec2 texcoord;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = vec4(vertex,0,1);&#xa;&#x9;texcoord    = coord;&#xa;}&#xa;" name="genericVertBody"/>
   <string val="#version 410&#xa;&#xa;layout(location = 0) out vec4 meanColor;&#xa;uniform sampler2D image;&#xa;uniform sampler2D prevLevel0;&#xa;uniform int nbLevels;&#xa;uniform int numLevel;&#xa;uniform bool isFinest;&#xa;uniform bool isCoarsest;&#xa;" name="genericFragHead"/>
   <string val="in vec2 texcoord;&#xa;&#xa;void main() {&#xa;&#x9;if(isFinest)&#xa;&#x9;&#x9;meanColor = texture(image,texcoord);&#xa;&#x9;else {&#xa;&#x9;&#x9;vec2 ps = .5/vec2(textureSize(prevLevel0,0));&#xa;&#x9;&#x9;vec4 c1 = texture(prevLevel0,texcoord+ps);&#xa;&#x9;&#x9;vec4 c2 = texture(prevLevel0,texcoord-ps);&#xa;&#x9;&#x9;vec4 c3 = texture(prevLevel0,texcoord+vec2(ps.x,-ps.y));&#xa;&#x9;&#x9;vec4 c4 = texture(prevLevel0,texcoord+vec2(-ps.x,ps.y));&#xa;&#x9;&#x9;meanColor = .25*(c1+c2+c3+c4);&#xa;&#x9;}&#xa;}&#xa;" name="genericFragBody"/>
   <string val="#version 410&#xa;&#xa;layout(vertices = 4) out;&#xa;uniform sampler2D image;&#xa;uniform sampler2D prevLevel0;&#xa;uniform int nbLevels;&#xa;uniform int numLevel;&#xa;uniform bool isFinest;&#xa;uniform bool isCoarsest;&#xa;" name="genericTessCHead"/>
   <string val="void main(void) {&#xa;&#x9;gl_TessLevelOuter[0] = 1;&#xa;&#x9;gl_TessLevelOuter[1] = 1;&#xa;&#x9;gl_TessLevelOuter[2] = 1;&#xa;&#x9;gl_TessLevelOuter[3] = 1;&#xa;&#x9;gl_TessLevelInner[0] = 1;&#xa;&#x9;gl_TessLevelInner[1] = 1;&#xa;&#x9;gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;&#xa;}&#xa;" name="genericTessCBody"/>
   <string val="#version 410&#xa;&#xa;uniform sampler2D image;&#xa;uniform sampler2D prevLevel0;&#xa;uniform int nbLevels;&#xa;uniform int numLevel;&#xa;uniform bool isFinest;&#xa;uniform bool isCoarsest;&#xa;" name="genericTessEHead"/>
   <string val="layout(quads,equal_spacing) in;&#xa;&#xa;void main() {&#xa;&#x9;vec4 p1 = mix(gl_in[0].gl_Position,gl_in[1].gl_Position,gl_TessCoord.x);&#xa;&#x9;vec4 p2 = mix(gl_in[3].gl_Position,gl_in[2].gl_Position,gl_TessCoord.x);&#xa;&#x9;gl_Position = mix(p1,p2,gl_TessCoord.y);&#xa;}&#xa;" name="genericTessEBody"/>
   <string val="#version 410&#xa;&#xa;layout(triangles) in;&#xa;uniform sampler2D image;&#xa;uniform sampler2D prevLevel0;&#xa;uniform int nbLevels;&#xa;uniform int numLevel;&#xa;uniform bool isFinest;&#xa;uniform bool isCoarsest;&#xa;" name="genericGeomHead"/>
   <string val="layout(triangle_strip, max_vertices = 3) out;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = gl_in[0].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[1].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[2].gl_Position; EmitVertex();&#xa;&#x9;EndPrimitive();&#xa;}" name="genericGeomBody"/>
   <vector2f name="genericTSize">
    <float val="1" name="0"/>
    <float val="1" name="1"/>
   </vector2f>
   <vector2f name="genericTOffset">
    <float val="0" name="0"/>
    <float val="0" name="1"/>
   </vector2f>
   <bool val="0" name="genericNeedMouse"/>
   <bool val="0" name="genericNeedKeyboard"/>
   <uint val="0" name="genericNbWidgets"/>
  </IOData>
  <IOData name="nodeWidget-0">
   <uint val="0" name="nbChildren"/>
  </IOData>
  <vector2f name="nodeInputPos-0-0">
   <float val="56.32" name="0"/>
   <float val="28.16" name="1"/>
  </vector2f>
  <vector2f name="nodeOutputPos-0-0">
   <float val="56.32" name="0"/>
   <float val="28.16" name="1"/>
  </vector2f>
  <bool val="1" name="nodeHasWidget-1"/>
  <IOData name="node-1">
   <int val="0" name="processMode"/>
   <string val="410" name="genericGlslVersion"/>
   <string val="globalVarianceColor" name="genericNodeName"/>
   <bool val="0" name="genericUseVertex"/>
   <bool val="0" name="genericUseTesselation"/>
   <bool val="0" name="genericUseGeometry"/>
   <bool val="1" name="genericUseFragment"/>
   <int val="9728" name="genericOutFilter"/>
   <int val="33071" name="genericOutWrap"/>
   <bool val="0" name="genericUseDepthTest"/>
   <bool val="0" name="genericUseBlending"/>
   <uint val="513" name="genericDepthFunc"/>
   <uint val="1" name="genericBlendSrc"/>
   <uint val="0" name="genericBlendDst"/>
   <vector4f name="genericBackground">
    <float val="0" name="0"/>
    <float val="0" name="1"/>
    <float val="0" name="2"/>
    <float val="0" name="3"/>
   </vector4f>
   <string val="#version 410&#xa;&#xa;layout(location = 0) in vec2 vertex;&#xa;layout(location = 1) in vec2 coord;&#xa;uniform sampler2D globalMeanPyramid;&#xa;uniform sampler2D prevLevel0;&#xa;uniform int nbLevels;&#xa;uniform int numLevel;&#xa;uniform bool isFinest;&#xa;uniform bool isCoarsest;&#xa;" name="genericVertHead"/>
   <string val="out vec2 texcoord;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = vec4(vertex,0,1);&#xa;&#x9;texcoord    = coord;&#xa;}&#xa;" name="genericVertBody"/>
   <string val="#version 410&#xa;&#xa;layout(location = 0) out vec4 varianceColor;&#xa;uniform sampler2D globalMeanPyramid;&#xa;uniform sampler2D prevLevel0;&#xa;uniform int nbLevels;&#xa;uniform int numLevel;&#xa;uniform bool isFinest;&#xa;uniform bool isCoarsest;&#xa;" name="genericFragHead"/>
   <string val="in vec2 texcoord;&#xa;&#xa;void main() {&#xa;&#x9;if(isFinest) {&#xa;&#x9;&#x9;vec2 s = vec2(textureSize(globalMeanPyramid,0));&#xa;&#x9;&#x9;float l = 1.+ floor(log2(max(s.x,s.y)));&#xa;&#x9;&#x9;vec4 v = texture(globalMeanPyramid,texcoord);&#xa;&#x9;&#x9;v.xyz = v.xyz-textureLod(globalMeanPyramid,vec2(.5),l).xyz;&#xa;&#x9;&#x9;varianceColor = v*v;&#xa;&#x9;} else {&#xa;&#x9;&#x9;vec2 ps = .5/vec2(textureSize(prevLevel0,0));&#xa;&#x9;&#x9;vec4 c1 = texture(prevLevel0,texcoord+ps);&#xa;&#x9;&#x9;vec4 c2 = texture(prevLevel0,texcoord-ps);&#xa;&#x9;&#x9;vec4 c3 = texture(prevLevel0,texcoord+vec2(ps.x,-ps.y));&#xa;&#x9;&#x9;vec4 c4 = texture(prevLevel0,texcoord+vec2(-ps.x,ps.y));&#xa;&#x9;&#x9;varianceColor = .25*(c1+c2+c3+c4);&#xa;&#x9;}&#xa;}&#xa;" name="genericFragBody"/>
   <string val="#version 410&#xa;&#xa;layout(vertices = 4) out;&#xa;uniform sampler2D globalMeanPyramid;&#xa;uniform sampler2D prevLevel0;&#xa;uniform int nbLevels;&#xa;uniform int numLevel;&#xa;uniform bool isFinest;&#xa;uniform bool isCoarsest;&#xa;" name="genericTessCHead"/>
   <string val="void main(void) {&#xa;&#x9;gl_TessLevelOuter[0] = 1;&#xa;&#x9;gl_TessLevelOuter[1] = 1;&#xa;&#x9;gl_TessLevelOuter[2] = 1;&#xa;&#x9;gl_TessLevelOuter[3] = 1;&#xa;&#x9;gl_TessLevelInner[0] = 1;&#xa;&#x9;gl_TessLevelInner[1] = 1;&#xa;&#x9;gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;&#xa;}&#xa;" name="genericTessCBody"/>
   <string val="#version 410&#xa;&#xa;uniform sampler2D globalMeanPyramid;&#xa;uniform sampler2D prevLevel0;&#xa;uniform int nbLevels;&#xa;uniform int numLevel;&#xa;uniform bool isFinest;&#xa;uniform bool isCoarsest;&#xa;" name="genericTessEHead"/>
   <string val="layout(quads,equal_spacing) in;&#xa;&#xa;void main() {&#xa;&#x9;vec4 p1 = mix(gl_in[0].gl_Position,gl_in[1].gl_Position,gl_TessCoord.x);&#xa;&#x9;vec4 p2 = mix(gl_in[3].gl_Position,gl_in[2].gl_Position,gl_TessCoord.x);&#xa;&#x9;gl_Position = mix(p1,p2,gl_TessCoord.y);&#xa;}&#xa;" name="genericTessEBody"/>
   <string val="#version 410&#xa;&#xa;layout(triangles) in;&#xa;uniform sampler2D globalMeanPyramid;&#xa;uniform sampler2D prevLevel0;&#xa;uniform int nbLevels;&#xa;uniform int numLevel;&#xa;uniform bool isFinest;&#xa;uniform bool isCoarsest;&#xa;" name="genericGeomHead"/>
   <string val="layout(triangle_strip, max_vertices = 3) out;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = gl_in[0].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[1].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[2].gl_Position; EmitVertex();&#xa;&#x9;EndPrimitive();&#xa;}" name="genericGeomBody"/>
   <vector2f name="genericTSize">
    <float val="1" name="0"/>
    <float val="1" name="1"/>
   </vector2f>
   <vector2f name="genericTOffset">
    <float val="0" name="0"/>
    <float val="0" name="1"/>
   </vector2f>
   <bool val="0" name="genericNeedMouse"/>
   <bool val="0" name="genericNeedKeyboard"/>
   <uint val="0" name="genericNbWidgets"/>
  </IOData>
  <IOData name="nodeWidget-1">
   <uint val="0" name="nbChildren"/>
  </IOData>
  <vector2f name="nodeInputPos-1-0">
   <float val="56.32" name="0"/>
   <float val="28.16" name="1"/>
  </vector2f>
  <vector2f name="nodeOutputPos-1-0">
   <float val="56.32" name="0"/>
   <float val="28.16" name="1"/>
  </vector2f>
  <bool val="1" name="nodeHasWidget-2"/>
  <IOData name="node-2">
   <string val="410" name="genericGlslVersion"/>
   <string val="tmoMeanStd" name="genericNodeName"/>
   <bool val="0" name="genericUseVertex"/>
   <bool val="0" name="genericUseTesselation"/>
   <bool val="0" name="genericUseGeometry"/>
   <bool val="1" name="genericUseFragment"/>
   <int val="9729" name="genericOutFilter"/>
   <int val="33071" name="genericOutWrap"/>
   <bool val="0" name="genericUseDepthTest"/>
   <bool val="0" name="genericUseBlending"/>
   <uint val="513" name="genericDepthFunc"/>
   <uint val="1" name="genericBlendSrc"/>
   <uint val="0" name="genericBlendDst"/>
   <vector4f name="genericBackground">
    <float val="0" name="0"/>
    <float val="0" name="1"/>
    <float val="0" name="2"/>
    <float val="0" name="3"/>
   </vector4f>
   <string val="#version 410&#xa;&#xa;layout(location = 0) in vec2 vertex;&#xa;layout(location = 1) in vec2 coord;&#xa;uniform sampler2D meanPyramid;&#xa;uniform sampler2D variancePyramid;&#xa;" name="genericVertHead"/>
   <string val="out vec2 texcoord;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = vec4(vertex,0,1);&#xa;&#x9;texcoord    = coord;&#xa;}&#xa;" name="genericVertBody"/>
   <string val="#version 410&#xa;&#xa;layout(location = 0) out vec4 toneMap;&#xa;uniform sampler2D meanPyramid;&#xa;uniform sampler2D variancePyramid;&#xa;" name="genericFragHead"/>
   <string val="in vec2 texcoord;&#xa;&#xa;void main() {&#xa;&#x9;vec2 s = textureSize(meanPyramid,0);&#xa;&#x9;float l = 1.+floor(log2(max(s.x,s.y)));&#xa;&#xa;&#x9;vec4 col = textureLod(meanPyramid,texcoord,0);&#xa;&#x9;vec3 cmean = textureLod(meanPyramid,vec2(.5),l).xyz;&#xa;&#x9;vec3 cvar = textureLod(variancePyramid,vec2(.5),l).xyz;&#xa;&#x9;&#xa;&#x9;float smean = (cmean.r+cmean.g+cmean.b)/3.;&#xa;&#x9;float sstd = sqrt((cvar.r+cvar.g+cvar.b)/3.);&#xa;&#x9;&#xa;&#x9;col.xyz = ((col.xyz-vec3(smean))/sstd)/3.+vec3(.5);&#xa;&#xa;&#x9;toneMap = col;&#xa;}&#xa;" name="genericFragBody"/>
   <string val="#version 410&#xa;&#xa;layout(vertices = 4) out;&#xa;uniform sampler2D meanPyramid;&#xa;uniform sampler2D variancePyramid;&#xa;" name="genericTessCHead"/>
   <string val="void main(void) {&#xa;&#x9;gl_TessLevelOuter[0] = 1;&#xa;&#x9;gl_TessLevelOuter[1] = 1;&#xa;&#x9;gl_TessLevelOuter[2] = 1;&#xa;&#x9;gl_TessLevelOuter[3] = 1;&#xa;&#x9;gl_TessLevelInner[0] = 1;&#xa;&#x9;gl_TessLevelInner[1] = 1;&#xa;&#x9;gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;&#xa;}&#xa;" name="genericTessCBody"/>
   <string val="#version 410&#xa;&#xa;uniform sampler2D meanPyramid;&#xa;uniform sampler2D variancePyramid;&#xa;" name="genericTessEHead"/>
   <string val="layout(quads,equal_spacing) in;&#xa;&#xa;void main() {&#xa;&#x9;vec4 p1 = mix(gl_in[0].gl_Position,gl_in[1].gl_Position,gl_TessCoord.x);&#xa;&#x9;vec4 p2 = mix(gl_in[3].gl_Position,gl_in[2].gl_Position,gl_TessCoord.x);&#xa;&#x9;gl_Position = mix(p1,p2,gl_TessCoord.y);&#xa;}&#xa;" name="genericTessEBody"/>
   <string val="#version 410&#xa;&#xa;layout(triangles) in;&#xa;uniform sampler2D meanPyramid;&#xa;uniform sampler2D variancePyramid;&#xa;" name="genericGeomHead"/>
   <string val="layout(triangle_strip, max_vertices = 3) out;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = gl_in[0].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[1].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[2].gl_Position; EmitVertex();&#xa;&#x9;EndPrimitive();&#xa;}" name="genericGeomBody"/>
   <vector2f name="genericTSize">
    <float val="1" name="0"/>
    <float val="1" name="1"/>
   </vector2f>
   <vector2f name="genericTOffset">
    <float val="0" name="0"/>
    <float val="0" name="1"/>
   </vector2f>
   <bool val="0" name="genericNeedMouse"/>
   <bool val="0" name="genericNeedKeyboard"/>
   <uint val="0" name="genericNbWidgets"/>
  </IOData>
  <IOData name="nodeWidget-2">
   <uint val="0" name="nbChildren"/>
  </IOData>
  <vector2f name="nodeInputPos-2-0">
   <float val="56.32" name="0"/>
   <float val="28.16" name="1"/>
  </vector2f>
  <vector2f name="nodeInputPos-2-1">
   <float val="56.32" name="0"/>
   <float val="28.16" name="1"/>
  </vector2f>
  <vector2f name="nodeOutputPos-2-0">
   <float val="56.32" name="0"/>
   <float val="28.16" name="1"/>
  </vector2f>
 </IOData>
 <IOData name="nodeWidget-0">
  <uint val="3" name="nbChildren"/>
  <IOData name="childWidget-0">
   <uint val="0" name="nbChildren"/>
  </IOData>
  <IOData name="childWidget-1">
   <uint val="0" name="nbChildren"/>
  </IOData>
  <IOData name="childWidget-2">
   <uint val="0" name="nbChildren"/>
  </IOData>
 </IOData>
 <vector2f name="nodeInputPos-0-0">
  <float val="56.32" name="0"/>
  <float val="28.16" name="1"/>
 </vector2f>
 <vector2f name="nodeOutputPos-0-0">
  <float val="56.32" name="0"/>
  <float val="28.16" name="1"/>
 </vector2f>
</Gratin>
