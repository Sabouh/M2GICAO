<Gratin type="pipeline">
 <int name="majorVersion" val="0"/>
 <int name="minorVersion" val="3"/>
 <IOData name="mainWindow">
  <IOData name="graphWidget">
   <IOData name="graph">
    <uint name="nbNodes" val="6"/>
    <string name="nodeStringId-0" val="imgLoaderId"/>
    <uint name="nodeVersion-0" val="1"/>
    <string name="nodeName-0" val="imageLoader"/>
    <string name="nodePath-0" val="Imaging/"/>
    <string name="nodeDesc-0" val="Image loader"/>
    <string name="nodeHelp-0" val="Load an image."/>
    <uint name="nodeId-0" val="0"/>
    <uint name="nodeGraphId-0" val="0"/>
    <vector2f name="nodePos-0">
     <float name="0" val="-4055.79"/>
     <float name="1" val="-22365.1"/>
    </vector2f>
    <int name="nodeInputNameSize-0" val="0"/>
    <int name="nodeOutputNameSize-0" val="1"/>
    <string name="nodeOutputName-0-0" val="image"/>
    <string name="nodeStringId-1" val="imgGaussianBlurId"/>
    <uint name="nodeVersion-1" val="1"/>
    <string name="nodeName-1" val="gaussianBlur"/>
    <string name="nodePath-1" val="Imaging/"/>
    <string name="nodeDesc-1" val="Gaussian blur"/>
    <string name="nodeHelp-1" val="The amount of blur is controled by the kernel size.&#xa;Increase this size to increase the blur"/>
    <uint name="nodeId-1" val="1"/>
    <uint name="nodeGraphId-1" val="0"/>
    <vector2f name="nodePos-1">
     <float name="0" val="-2820.93"/>
     <float name="1" val="-20751.7"/>
    </vector2f>
    <int name="nodeInputNameSize-1" val="1"/>
    <int name="nodeOutputNameSize-1" val="1"/>
    <string name="nodeInputName-1-0" val="image"/>
    <string name="nodeOutputName-1-0" val="filtering"/>
    <string name="nodeStringId-2" val="bilateralFilterID"/>
    <uint name="nodeVersion-2" val="1"/>
    <string name="nodeName-2" val="bilateralFilter"/>
    <string name="nodePath-2" val="Imaging/"/>
    <string name="nodeDesc-2" val="Bilateral filter [Tomasi and Manduchi ICCV 1998]"/>
    <string name="nodeHelp-2" val="Implementation of the bilateral filter from the paper &quot;Bilateral Filtering for Gray and Color Images&quot; [Tomasi and Manduchi ICCV 1998].&#xa;&#xa;sigmaS controls the spatial averaging. &#xa;sigmaL controls controls edges (how much intensity variations to stop the blur)."/>
    <uint name="nodeId-2" val="2"/>
    <uint name="nodeGraphId-2" val="0"/>
    <vector2f name="nodePos-2">
     <float name="0" val="-2818.37"/>
     <float name="1" val="-21575.7"/>
    </vector2f>
    <int name="nodeInputNameSize-2" val="1"/>
    <int name="nodeOutputNameSize-2" val="1"/>
    <string name="nodeInputName-2-0" val="image"/>
    <string name="nodeOutputName-2-0" val="filtering"/>
    <string name="nodeStringId-3" val="rollingGuidedFilterID"/>
    <uint name="nodeVersion-3" val="1"/>
    <string name="nodeName-3" val="rollingGuidedFilter"/>
    <string name="nodePath-3" val="Imaging/"/>
    <string name="nodeDesc-3" val="Rolling Guidance Filter [Zhang et al. ECCV 2014]"/>
    <string name="nodeHelp-3" val="Implementation of the paper &quot;Rolling Guidance Filter&quot; [Zhang et al. ECCV 2014]. &#xa;This is a filter that allows an image to be abstracted while preserving its edges.&#xa;sigmaS controls spatial averaging. &#xa;sigmaL controls intensity differences for defining edges. &#xa;The number of iterations is controlled by &quot;nb passes&quot;.&#xa;"/>
    <uint name="nodeId-3" val="3"/>
    <uint name="nodeGraphId-3" val="0"/>
    <vector2f name="nodePos-3">
     <float name="0" val="-2825.09"/>
     <float name="1" val="-23151.9"/>
    </vector2f>
    <int name="nodeInputNameSize-3" val="1"/>
    <int name="nodeOutputNameSize-3" val="1"/>
    <string name="nodeInputName-3-0" val="image"/>
    <string name="nodeOutputName-3-0" val="filtering"/>
    <string name="nodeStringId-4" val="anisotropicDiffusionID"/>
    <uint name="nodeVersion-4" val="1"/>
    <string name="nodeName-4" val="anisotropicDiffusion"/>
    <string name="nodePath-4" val="Imaging/"/>
    <string name="nodeDesc-4" val="Anisotropic diffusion [Perona and Malik TPAMI 1990]"/>
    <string name="nodeHelp-4" val="Implementation of the anisotropic diffusion, from the paper &quot;Scale-space and edge detection using anisotropic diffusion&quot; [Perona and Malik TPAMI 1990]. &#xa;&#xa;This is an iterative node. Increase the number of passes will increase the blur. &#xa;The distance function is controlled by a gaussian function in that case. "/>
    <uint name="nodeId-4" val="4"/>
    <uint name="nodeGraphId-4" val="0"/>
    <vector2f name="nodePos-4">
     <float name="0" val="-2817.3"/>
     <float name="1" val="-22369.2"/>
    </vector2f>
    <int name="nodeInputNameSize-4" val="1"/>
    <int name="nodeOutputNameSize-4" val="1"/>
    <string name="nodeInputName-4-0" val="image"/>
    <string name="nodeOutputName-4-0" val="diffusion"/>
    <string name="nodeStringId-5" val="sobelFilterID"/>
    <uint name="nodeVersion-5" val="1"/>
    <string name="nodeName-5" val="sobelEdges"/>
    <string name="nodePath-5" val="Imaging/"/>
    <string name="nodeDesc-5" val="Sobel edges"/>
    <string name="nodeHelp-5" val="Sobel edges. &#xa;The magnitude of the sobel operator is stored is computed &#xa;and stored separatly for each channel."/>
    <uint name="nodeId-5" val="5"/>
    <uint name="nodeGraphId-5" val="0"/>
    <vector2f name="nodePos-5">
     <float name="0" val="-2822.1"/>
     <float name="1" val="-23915.5"/>
    </vector2f>
    <int name="nodeInputNameSize-5" val="1"/>
    <int name="nodeOutputNameSize-5" val="1"/>
    <string name="nodeInputName-5-0" val="image"/>
    <string name="nodeOutputName-5-0" val="edges"/>
    <uint name="nbConnections-0-1" val="1"/>
    <vector2u name="connection-0-1-0">
     <uint name="0" val="0"/>
     <uint name="1" val="0"/>
    </vector2u>
    <uint name="nbConnections-0-2" val="1"/>
    <vector2u name="connection-0-2-0">
     <uint name="0" val="0"/>
     <uint name="1" val="0"/>
    </vector2u>
    <uint name="nbConnections-0-3" val="1"/>
    <vector2u name="connection-0-3-0">
     <uint name="0" val="0"/>
     <uint name="1" val="0"/>
    </vector2u>
    <uint name="nbConnections-0-4" val="1"/>
    <vector2u name="connection-0-4-0">
     <uint name="0" val="0"/>
     <uint name="1" val="0"/>
    </vector2u>
    <uint name="nbConnections-0-5" val="1"/>
    <vector2u name="connection-0-5-0">
     <uint name="0" val="0"/>
     <uint name="1" val="0"/>
    </vector2u>
    <uint name="nbConnections-1-2" val="0"/>
    <uint name="nbConnections-1-3" val="0"/>
    <uint name="nbConnections-1-4" val="0"/>
    <uint name="nbConnections-1-5" val="0"/>
    <uint name="nbConnections-2-3" val="0"/>
    <uint name="nbConnections-2-4" val="0"/>
    <uint name="nbConnections-2-5" val="0"/>
    <uint name="nbConnections-3-4" val="0"/>
    <uint name="nbConnections-3-5" val="0"/>
    <uint name="nbConnections-4-5" val="0"/>
    <bool name="nodeHasWidget-0" val="1"/>
    <IOData name="node-0">
     <string name="filename" val="../imgs/dog.jpg"/>
     <vector2i name="size">
      <int name="0" val="512"/>
      <int name="1" val="512"/>
     </vector2i>
    </IOData>
    <IOData name="nodeWidget-0">
     <bool name="keepAspectRatio" val="0"/>
     <bool name="keepSize" val="0"/>
    </IOData>
    <vector2f name="nodeOutputPos-0-0">
     <float name="0" val="56.32"/>
     <float name="1" val="28.16"/>
    </vector2f>
    <bool name="nodeHasWidget-1" val="1"/>
    <IOData name="node-1"/>
    <IOData name="nodeWidget-1">
     <uint name="nbChildren" val="1"/>
     <IOData name="childWidget-0">
      <bool name="intAttribKeyframed" val="1"/>
      <int name="intAttribMinVal" val="0"/>
      <int name="intAttribMaxVal" val="500"/>
      <IOData name="intAttribCurve">
       <int name="currentVal" val="26"/>
       <uint name="nbCurves" val="1"/>
       <IOData name="curve-0">
        <int name="interpType" val="0"/>
        <int name="leftType" val="0"/>
        <int name="rightType" val="0"/>
        <IOData name="interpolator">
         <uint name="nbPoints" val="1"/>
         <uint name="nbTangents" val="0"/>
         <vector2f name="controlPoint-0">
          <float name="0" val="0"/>
          <float name="1" val="26"/>
         </vector2f>
        </IOData>
       </IOData>
      </IOData>
      <uint name="nbChildren" val="0"/>
     </IOData>
    </IOData>
    <vector2f name="nodeInputPos-1-0">
     <float name="0" val="56.32"/>
     <float name="1" val="28.16"/>
    </vector2f>
    <vector2f name="nodeOutputPos-1-0">
     <float name="0" val="56.32"/>
     <float name="1" val="28.16"/>
    </vector2f>
    <bool name="nodeHasWidget-2" val="1"/>
    <IOData name="node-2">
     <string name="genericGlslVersion" val="410"/>
     <string name="genericNodeName" val="bilateralFilter"/>
     <bool name="genericUseVertex" val="0"/>
     <bool name="genericUseTesselation" val="0"/>
     <bool name="genericUseGeometry" val="0"/>
     <bool name="genericUseFragment" val="1"/>
     <int name="genericOutFilter" val="9729"/>
     <int name="genericOutWrap" val="33071"/>
     <bool name="genericUseDepthTest" val="0"/>
     <bool name="genericUseBlending" val="0"/>
     <uint name="genericDepthFunc" val="513"/>
     <uint name="genericBlendSrc" val="1"/>
     <uint name="genericBlendDst" val="0"/>
     <vector4f name="genericBackground">
      <float name="0" val="0"/>
      <float name="1" val="0"/>
      <float name="2" val="0"/>
      <float name="3" val="0"/>
     </vector4f>
     <string name="genericVertHead" val="#version 410&#xa;&#xa;layout(location = 0) in vec2 vertex;&#xa;layout(location = 1) in vec2 coord;&#xa;uniform sampler2D image;&#xa;uniform float sigmaS;&#xa;uniform float sigmaL;&#xa;"/>
     <string name="genericVertBody" val="out vec2 texcoord;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = vec4(vertex,0,1);&#xa;&#x9;texcoord    = coord;&#xa;}&#xa;"/>
     <string name="genericFragHead" val="#version 410&#xa;&#xa;layout(location = 0) out vec4 filtering;&#xa;uniform sampler2D image;&#xa;uniform float sigmaS;&#xa;uniform float sigmaL;&#xa;"/>
     <string name="genericFragBody" val="#define F 0.619928135&#xa;&#xa;in vec2 texcoord;&#xa;&#xa;float lum(in vec4 color) {&#xa;&#x9;return length(color.xyz);&#xa;}&#xa;&#xa;void main() {&#xa;&#x9;const float eps = 1e-10;&#xa;&#xa;&#x9;float sigS = max(sigmaS,eps);&#xa;&#x9;float halfsize = ceil(sigS/F);&#xa;&#x9;vec2 pixelSize = 1.0/vec2(textureSize(image,0));&#xa;&#xa;&#x9;float facS = -1./(2.*sigS*sigS);&#xa;&#x9;float facL = -1./(2.*sigmaL*sigmaL);&#xa;&#xa;&#x9;float sumW = 0.;&#xa;&#x9;vec4  sumC = vec4(0.);&#xa;&#xa;&#x9;float l = lum(texture(image,texcoord));&#xa;&#xa;&#x9;for(float i=-halfsize;i&lt;=halfsize;++i) {&#xa;&#x9;&#x9;for(float j=-halfsize;j&lt;=halfsize;++j) {&#xa;&#x9;&#x9;&#x9;vec2 pos = vec2(i,j);&#xa;&#x9;&#x9;&#x9;vec4 col = texture(image,texcoord+pos*pixelSize);&#xa;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;float distS = length(pos);&#xa;&#x9;&#x9;&#x9;float distL = lum(col)-l;&#xa;&#xa;&#x9;&#x9;&#x9;float wS = exp(facS*float(distS*distS));&#xa;&#x9;&#x9;&#x9;float wL = exp(facL*float(distL*distL));&#xa;&#x9;&#x9;&#x9;float w = wS*wL;&#xa;&#xa;&#x9;&#x9;&#x9;sumW += w;&#xa;&#x9;&#x9;&#x9;sumC += col*w;&#xa;&#x9;&#x9;}&#xa;&#x9;}&#xa;&#xa;&#x9;filtering = sumC/sumW;&#xa;}"/>
     <string name="genericTessCHead" val="#version 410&#xa;&#xa;layout(vertices = 4) out;&#xa;uniform sampler2D image;&#xa;uniform float sigmaS;&#xa;uniform float sigmaL;&#xa;"/>
     <string name="genericTessCBody" val="void main(void) {&#xa;&#x9;gl_TessLevelOuter[0] = 1;&#xa;&#x9;gl_TessLevelOuter[1] = 1;&#xa;&#x9;gl_TessLevelOuter[2] = 1;&#xa;&#x9;gl_TessLevelOuter[3] = 1;&#xa;&#x9;gl_TessLevelInner[0] = 1;&#xa;&#x9;gl_TessLevelInner[1] = 1;&#xa;&#x9;gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;&#xa;}&#xa;"/>
     <string name="genericTessEHead" val="#version 410&#xa;&#xa;uniform sampler2D image;&#xa;uniform float sigmaS;&#xa;uniform float sigmaL;&#xa;"/>
     <string name="genericTessEBody" val="layout(quads,equal_spacing) in;&#xa;&#xa;void main() {&#xa;&#x9;vec4 p1 = mix(gl_in[0].gl_Position,gl_in[1].gl_Position,gl_TessCoord.x);&#xa;&#x9;vec4 p2 = mix(gl_in[3].gl_Position,gl_in[2].gl_Position,gl_TessCoord.x);&#xa;&#x9;gl_Position = mix(p1,p2,gl_TessCoord.y);&#xa;}&#xa;"/>
     <string name="genericGeomHead" val="#version 410&#xa;&#xa;layout(triangles) in;&#xa;uniform sampler2D image;&#xa;uniform float sigmaS;&#xa;uniform float sigmaL;&#xa;"/>
     <string name="genericGeomBody" val="layout(triangle_strip, max_vertices = 3) out;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = gl_in[0].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[1].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[2].gl_Position; EmitVertex();&#xa;&#x9;EndPrimitive();&#xa;}"/>
     <vector2f name="genericTSize">
      <float name="0" val="1"/>
      <float name="1" val="1"/>
     </vector2f>
     <vector2f name="genericTOffset">
      <float name="0" val="0"/>
      <float name="1" val="0"/>
     </vector2f>
     <bool name="genericNeedMouse" val="0"/>
     <bool name="genericNeedKeyboard" val="0"/>
     <uint name="genericNbWidgets" val="2"/>
     <int name="genericWidgetType-0" val="0"/>
     <int name="genericWidgetView-0" val="1"/>
     <string name="genericWidgetName-0" val="sigmaS"/>
     <bool name="genericWidgetKeyframed-0" val="1"/>
     <int name="genericWidgetType-1" val="0"/>
     <int name="genericWidgetView-1" val="1"/>
     <string name="genericWidgetName-1" val="sigmaL"/>
     <bool name="genericWidgetKeyframed-1" val="1"/>
    </IOData>
    <IOData name="nodeWidget-2">
     <uint name="nbChildren" val="2"/>
     <IOData name="childWidget-0">
      <bool name="floatAttribKeyframed" val="1"/>
      <float name="floatAttribMinVal" val="0"/>
      <float name="floatAttribMaxVal" val="10"/>
      <IOData name="floatAttribCurve">
       <float name="currentVal" val="5"/>
       <uint name="nbCurves" val="1"/>
       <IOData name="curve-0">
        <int name="interpType" val="0"/>
        <int name="leftType" val="0"/>
        <int name="rightType" val="0"/>
        <IOData name="interpolator">
         <uint name="nbPoints" val="1"/>
         <uint name="nbTangents" val="0"/>
         <vector2f name="controlPoint-0">
          <float name="0" val="0"/>
          <float name="1" val="5"/>
         </vector2f>
        </IOData>
       </IOData>
      </IOData>
      <uint name="nbChildren" val="0"/>
     </IOData>
     <IOData name="childWidget-1">
      <bool name="floatAttribKeyframed" val="1"/>
      <float name="floatAttribMinVal" val="0"/>
      <float name="floatAttribMaxVal" val="1"/>
      <IOData name="floatAttribCurve">
       <float name="currentVal" val="0.29"/>
       <uint name="nbCurves" val="1"/>
       <IOData name="curve-0">
        <int name="interpType" val="0"/>
        <int name="leftType" val="0"/>
        <int name="rightType" val="0"/>
        <IOData name="interpolator">
         <uint name="nbPoints" val="1"/>
         <uint name="nbTangents" val="0"/>
         <vector2f name="controlPoint-0">
          <float name="0" val="0"/>
          <float name="1" val="0.29"/>
         </vector2f>
        </IOData>
       </IOData>
      </IOData>
      <uint name="nbChildren" val="0"/>
     </IOData>
    </IOData>
    <vector2f name="nodeInputPos-2-0">
     <float name="0" val="56.32"/>
     <float name="1" val="28.16"/>
    </vector2f>
    <vector2f name="nodeOutputPos-2-0">
     <float name="0" val="56.32"/>
     <float name="1" val="28.16"/>
    </vector2f>
    <bool name="nodeHasWidget-3" val="1"/>
    <IOData name="node-3">
     <string name="genericGlslVersion" val="410"/>
     <string name="genericNodeName" val="rollingGuidedFilter"/>
     <bool name="genericUseVertex" val="0"/>
     <bool name="genericUseTesselation" val="0"/>
     <bool name="genericUseGeometry" val="0"/>
     <bool name="genericUseFragment" val="1"/>
     <int name="genericOutFilter" val="9729"/>
     <int name="genericOutWrap" val="33071"/>
     <bool name="genericUseDepthTest" val="0"/>
     <bool name="genericUseBlending" val="0"/>
     <uint name="genericDepthFunc" val="513"/>
     <uint name="genericBlendSrc" val="1"/>
     <uint name="genericBlendDst" val="0"/>
     <vector4f name="genericBackground">
      <float name="0" val="0"/>
      <float name="1" val="0"/>
      <float name="2" val="0"/>
      <float name="3" val="0"/>
     </vector4f>
     <string name="genericVertHead" val="#version 410&#xa;&#xa;layout(location = 0) in vec2 vertex;&#xa;layout(location = 1) in vec2 coord;&#xa;uniform sampler2D image;&#xa;uniform float sigmaS;&#xa;uniform float sigmaR;&#xa;uniform sampler2D pingpong0;&#xa;uniform int numpass;&#xa;"/>
     <string name="genericVertBody" val="out vec2 texcoord;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = vec4(vertex,0,1);&#xa;&#x9;texcoord    = coord;&#xa;}&#xa;"/>
     <string name="genericFragHead" val="#version 410&#xa;&#xa;layout(location = 0) out vec4 filtering;&#xa;uniform sampler2D image;&#xa;uniform float sigmaS;&#xa;uniform float sigmaR;&#xa;uniform sampler2D pingpong0;&#xa;uniform int numpass;&#xa;"/>
     <string name="genericFragBody" val="in vec2 texcoord;&#xa;&#xa;vec4 jointBilateral(in sampler2D I, in sampler2D J,in float sigs,in float sigr) {&#xa;&#x9;vec2 ps = 1./vec2(textureSize(I,0));&#xa;&#x9;int halfsize = max(int(sigs*3.0),1);&#xa;&#x9;float d1 = 2.*sigs*sigs;&#xa;&#x9;float d2 = 2.*sigr*sigr;&#xa;&#x9;vec4 Jp = texture(J,texcoord);&#xa;&#x9;vec4 Kp = vec4(0.);&#xa;&#x9;vec4 Jn = vec4(0.);&#xa;&#xa;&#x9;for(int n=-halfsize;n&lt;=halfsize;++n) {&#xa;&#x9;&#x9;for(int m=-halfsize;m&lt;=halfsize;++m) {&#xa;&#x9;&#x9;&#x9;vec2 q = vec2(float(n),float(m));&#xa;&#x9;&#x9;&#x9;vec4 Jq = texture(J,texcoord+q*ps);&#xa;&#x9;&#x9;&#x9;vec4 Iq = texture(I,texcoord+q*ps);&#xa;&#x9;&#x9;&#x9;vec4 dpq = vec4(length(q));&#xa;&#x9;&#x9;&#x9;vec4 dJpq = Jp-Jq;&#xa;&#x9;&#x9;&#x9;vec4 fac = exp(-(dpq*dpq)/d1-(dJpq*dJpq)/d2);&#xa;&#x9;&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;Jn += fac*Iq;&#xa;&#x9;&#x9;&#x9;Kp += fac;&#xa;&#x9;&#x9;}&#xa;&#x9;}&#xa;&#xa;&#x9;return Jn/Kp;&#xa;}&#xa;&#xa;void main() {&#xa;&#x9;if(numpass==0) {&#xa;&#x9;&#x9;// initialize J with constant value&#xa;&#x9;&#x9;filtering = vec4(vec3(.5),1.);&#xa;&#x9;} else {&#xa;&#x9;&#x9;// apply joint-bilateral filtering&#xa;&#x9;&#x9;filtering = jointBilateral(image,pingpong0,sigmaS,sigmaR);&#xa;&#x9;}&#xa;}&#xa;"/>
     <string name="genericTessCHead" val="#version 410&#xa;&#xa;layout(vertices = 4) out;&#xa;uniform sampler2D image;&#xa;uniform float sigmaS;&#xa;uniform float sigmaR;&#xa;uniform sampler2D pingpong0;&#xa;uniform int numpass;&#xa;"/>
     <string name="genericTessCBody" val="void main(void) {&#xa;&#x9;gl_TessLevelOuter[0] = 1;&#xa;&#x9;gl_TessLevelOuter[1] = 1;&#xa;&#x9;gl_TessLevelOuter[2] = 1;&#xa;&#x9;gl_TessLevelOuter[3] = 1;&#xa;&#x9;gl_TessLevelInner[0] = 1;&#xa;&#x9;gl_TessLevelInner[1] = 1;&#xa;&#x9;gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;&#xa;}&#xa;"/>
     <string name="genericTessEHead" val="#version 410&#xa;&#xa;uniform sampler2D image;&#xa;uniform float sigmaS;&#xa;uniform float sigmaR;&#xa;uniform sampler2D pingpong0;&#xa;uniform int numpass;&#xa;"/>
     <string name="genericTessEBody" val="layout(quads,equal_spacing) in;&#xa;&#xa;void main() {&#xa;&#x9;vec4 p1 = mix(gl_in[0].gl_Position,gl_in[1].gl_Position,gl_TessCoord.x);&#xa;&#x9;vec4 p2 = mix(gl_in[3].gl_Position,gl_in[2].gl_Position,gl_TessCoord.x);&#xa;&#x9;gl_Position = mix(p1,p2,gl_TessCoord.y);&#xa;}&#xa;"/>
     <string name="genericGeomHead" val="#version 410&#xa;&#xa;layout(triangles) in;&#xa;uniform sampler2D image;&#xa;uniform float sigmaS;&#xa;uniform float sigmaR;&#xa;uniform sampler2D pingpong0;&#xa;uniform int numpass;&#xa;"/>
     <string name="genericGeomBody" val="layout(triangle_strip, max_vertices = 3) out;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = gl_in[0].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[1].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[2].gl_Position; EmitVertex();&#xa;&#x9;EndPrimitive();&#xa;}"/>
     <vector2f name="genericTSize">
      <float name="0" val="1"/>
      <float name="1" val="1"/>
     </vector2f>
     <vector2f name="genericTOffset">
      <float name="0" val="0"/>
      <float name="1" val="0"/>
     </vector2f>
     <bool name="genericNeedMouse" val="0"/>
     <bool name="genericNeedKeyboard" val="0"/>
     <uint name="genericNbWidgets" val="2"/>
     <int name="genericWidgetType-0" val="0"/>
     <int name="genericWidgetView-0" val="1"/>
     <string name="genericWidgetName-0" val="sigmaS"/>
     <bool name="genericWidgetKeyframed-0" val="1"/>
     <int name="genericWidgetType-1" val="0"/>
     <int name="genericWidgetView-1" val="1"/>
     <string name="genericWidgetName-1" val="sigmaR"/>
     <bool name="genericWidgetKeyframed-1" val="1"/>
     <int name="pingPongNumber" val="5"/>
     <bool name="pingPongUpdateOnceChanged" val="0"/>
     <bool name="pingPongUpdateAllChanged" val="0"/>
     <bool name="pingPongReinitWhenChanged" val="0"/>
     <bool name="pingPongRefreshAllFrames" val="0"/>
    </IOData>
    <IOData name="nodeWidget-3">
     <uint name="nbChildren" val="2"/>
     <IOData name="childWidget-0">
      <bool name="floatAttribKeyframed" val="1"/>
      <float name="floatAttribMinVal" val="0"/>
      <float name="floatAttribMaxVal" val="10"/>
      <IOData name="floatAttribCurve">
       <float name="currentVal" val="3"/>
       <uint name="nbCurves" val="1"/>
       <IOData name="curve-0">
        <int name="interpType" val="0"/>
        <int name="leftType" val="0"/>
        <int name="rightType" val="0"/>
        <IOData name="interpolator">
         <uint name="nbPoints" val="1"/>
         <uint name="nbTangents" val="0"/>
         <vector2f name="controlPoint-0">
          <float name="0" val="0"/>
          <float name="1" val="3"/>
         </vector2f>
        </IOData>
       </IOData>
      </IOData>
      <uint name="nbChildren" val="0"/>
     </IOData>
     <IOData name="childWidget-1">
      <bool name="floatAttribKeyframed" val="1"/>
      <float name="floatAttribMinVal" val="0"/>
      <float name="floatAttribMaxVal" val="1"/>
      <IOData name="floatAttribCurve">
       <float name="currentVal" val="0.02"/>
       <uint name="nbCurves" val="1"/>
       <IOData name="curve-0">
        <int name="interpType" val="0"/>
        <int name="leftType" val="0"/>
        <int name="rightType" val="0"/>
        <IOData name="interpolator">
         <uint name="nbPoints" val="1"/>
         <uint name="nbTangents" val="0"/>
         <vector2f name="controlPoint-0">
          <float name="0" val="0"/>
          <float name="1" val="0.02"/>
         </vector2f>
        </IOData>
       </IOData>
      </IOData>
      <uint name="nbChildren" val="0"/>
     </IOData>
    </IOData>
    <vector2f name="nodeInputPos-3-0">
     <float name="0" val="56.32"/>
     <float name="1" val="28.16"/>
    </vector2f>
    <vector2f name="nodeOutputPos-3-0">
     <float name="0" val="56.32"/>
     <float name="1" val="28.16"/>
    </vector2f>
    <bool name="nodeHasWidget-4" val="1"/>
    <IOData name="node-4">
     <string name="genericGlslVersion" val="410"/>
     <string name="genericNodeName" val="anisotropicDiffusion"/>
     <bool name="genericUseVertex" val="0"/>
     <bool name="genericUseTesselation" val="0"/>
     <bool name="genericUseGeometry" val="0"/>
     <bool name="genericUseFragment" val="1"/>
     <int name="genericOutFilter" val="9729"/>
     <int name="genericOutWrap" val="33071"/>
     <bool name="genericUseDepthTest" val="0"/>
     <bool name="genericUseBlending" val="0"/>
     <uint name="genericDepthFunc" val="513"/>
     <uint name="genericBlendSrc" val="1"/>
     <uint name="genericBlendDst" val="0"/>
     <vector4f name="genericBackground">
      <float name="0" val="0"/>
      <float name="1" val="0"/>
      <float name="2" val="0"/>
      <float name="3" val="0"/>
     </vector4f>
     <string name="genericVertHead" val="#version 410&#xa;&#xa;layout(location = 0) in vec2 vertex;&#xa;layout(location = 1) in vec2 coord;&#xa;uniform sampler2D image;&#xa;uniform sampler2D pingpong0;&#xa;uniform int numpass;&#xa;"/>
     <string name="genericVertBody" val="out vec2 texcoord;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = vec4(vertex,0,1);&#xa;&#x9;texcoord    = coord;&#xa;}&#xa;"/>
     <string name="genericFragHead" val="#version 410&#xa;&#xa;layout(location = 0) out vec4 diffusion;&#xa;uniform sampler2D image;&#xa;uniform sampler2D pingpong0;&#xa;uniform int numpass;&#xa;"/>
     <string name="genericFragBody" val="in vec2 texcoord;&#xa;&#xa;void loadVals(in sampler2D tex,out vec3 vals[5]) {&#xa;&#x9;// neighborhood&#xa;&#x9;vec2 ps = 1./vec2(textureSize(tex,0));&#xa;&#x9;vals[0] = texture(tex,texcoord).xyz;&#xa;&#x9;vals[1] = texture(tex,texcoord+vec2(-ps.x,0.)).xyz;&#xa;&#x9;vals[2] = texture(tex,texcoord+vec2(ps.x,0.)).xyz;&#xa;&#x9;vals[3] = texture(tex,texcoord+vec2(0.,-ps.y)).xyz;&#xa;&#x9;vals[4] = texture(tex,texcoord+vec2(0.,ps.y)).xyz;&#xa;}&#xa;&#xa;float dist(in vec3 c1,in vec3 c2) {&#xa;&#x9;// distance control &#xa;&#x9;float s = 0.02;&#xa;&#x9;float x = length(c1)-length(c2);&#xa;&#x9;float d = exp(-(x*x)/(2.*s*s));&#xa;&#x9;return d;&#xa;}&#xa;&#xa;vec4 applyFiltering(in sampler2D tex) {&#xa;&#x9;// anisotropic filtering&#xa;&#x9;vec3 Vf[5];&#xa;&#x9;vec3 Vd[5];&#xa;&#x9;loadVals(tex,Vf);&#xa;&#x9;loadVals(image,Vd);&#xa;&#xa;  &#x9;vec3 R = Vf[0] + &#xa;&#x9;&#x9;&#x9;.1*(dist(Vd[1],Vd[0])*(Vf[1]-Vf[0]) +&#xa;&#x9;&#x9;&#x9;&#x9;dist(Vd[2],Vd[0])*(Vf[2]-Vf[0]) +&#xa;&#x9;&#x9;&#x9;&#x9;dist(Vd[3],Vd[0])*(Vf[3]-Vf[0]) +&#xa;&#x9;&#x9;&#x9;&#x9;dist(Vd[4],Vd[0])*(Vf[4]-Vf[0]));&#xa;&#xa;&#x9;return vec4(R,1.);&#xa;}&#xa;&#xa;void main() {&#xa;&#x9;if(numpass==0) { // first pass: copy input&#xa;&#x9;&#x9;diffusion = texture(image,texcoord);&#xa;&#x9;} else { // otherwise: successively apply filtering&#xa;&#x9;&#x9;diffusion = applyFiltering(pingpong0);&#xa;&#x9;}&#xa;}&#xa;"/>
     <string name="genericTessCHead" val="#version 410&#xa;&#xa;layout(vertices = 4) out;&#xa;uniform sampler2D image;&#xa;uniform sampler2D pingpong0;&#xa;uniform int numpass;&#xa;"/>
     <string name="genericTessCBody" val="void main(void) {&#xa;&#x9;gl_TessLevelOuter[0] = 1;&#xa;&#x9;gl_TessLevelOuter[1] = 1;&#xa;&#x9;gl_TessLevelOuter[2] = 1;&#xa;&#x9;gl_TessLevelOuter[3] = 1;&#xa;&#x9;gl_TessLevelInner[0] = 1;&#xa;&#x9;gl_TessLevelInner[1] = 1;&#xa;&#x9;gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;&#xa;}&#xa;"/>
     <string name="genericTessEHead" val="#version 410&#xa;&#xa;uniform sampler2D image;&#xa;uniform sampler2D pingpong0;&#xa;uniform int numpass;&#xa;"/>
     <string name="genericTessEBody" val="layout(quads,equal_spacing) in;&#xa;&#xa;void main() {&#xa;&#x9;vec4 p1 = mix(gl_in[0].gl_Position,gl_in[1].gl_Position,gl_TessCoord.x);&#xa;&#x9;vec4 p2 = mix(gl_in[3].gl_Position,gl_in[2].gl_Position,gl_TessCoord.x);&#xa;&#x9;gl_Position = mix(p1,p2,gl_TessCoord.y);&#xa;}&#xa;"/>
     <string name="genericGeomHead" val="#version 410&#xa;&#xa;layout(triangles) in;&#xa;uniform sampler2D image;&#xa;uniform sampler2D pingpong0;&#xa;uniform int numpass;&#xa;"/>
     <string name="genericGeomBody" val="layout(triangle_strip, max_vertices = 3) out;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = gl_in[0].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[1].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[2].gl_Position; EmitVertex();&#xa;&#x9;EndPrimitive();&#xa;}"/>
     <vector2f name="genericTSize">
      <float name="0" val="1"/>
      <float name="1" val="1"/>
     </vector2f>
     <vector2f name="genericTOffset">
      <float name="0" val="0"/>
      <float name="1" val="0"/>
     </vector2f>
     <bool name="genericNeedMouse" val="0"/>
     <bool name="genericNeedKeyboard" val="0"/>
     <uint name="genericNbWidgets" val="0"/>
     <int name="pingPongNumber" val="500"/>
     <bool name="pingPongUpdateOnceChanged" val="0"/>
     <bool name="pingPongUpdateAllChanged" val="0"/>
     <bool name="pingPongReinitWhenChanged" val="0"/>
     <bool name="pingPongRefreshAllFrames" val="0"/>
    </IOData>
    <IOData name="nodeWidget-4">
     <uint name="nbChildren" val="0"/>
    </IOData>
    <vector2f name="nodeInputPos-4-0">
     <float name="0" val="56.32"/>
     <float name="1" val="28.16"/>
    </vector2f>
    <vector2f name="nodeOutputPos-4-0">
     <float name="0" val="56.32"/>
     <float name="1" val="28.16"/>
    </vector2f>
    <bool name="nodeHasWidget-5" val="1"/>
    <IOData name="node-5">
     <string name="genericGlslVersion" val="410"/>
     <string name="genericNodeName" val="sobelEdges"/>
     <bool name="genericUseVertex" val="0"/>
     <bool name="genericUseTesselation" val="0"/>
     <bool name="genericUseGeometry" val="0"/>
     <bool name="genericUseFragment" val="1"/>
     <int name="genericOutFilter" val="9729"/>
     <int name="genericOutWrap" val="33071"/>
     <bool name="genericUseDepthTest" val="0"/>
     <bool name="genericUseBlending" val="0"/>
     <uint name="genericDepthFunc" val="513"/>
     <uint name="genericBlendSrc" val="1"/>
     <uint name="genericBlendDst" val="0"/>
     <vector4f name="genericBackground">
      <float name="0" val="0"/>
      <float name="1" val="0"/>
      <float name="2" val="0"/>
      <float name="3" val="0"/>
     </vector4f>
     <string name="genericVertHead" val="#version 410&#xa;&#xa;layout(location = 0) in vec2 vertex;&#xa;layout(location = 1) in vec2 coord;&#xa;uniform sampler2D image;&#xa;"/>
     <string name="genericVertBody" val="out vec2 texcoord;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = vec4(vertex,0,1);&#xa;&#x9;texcoord    = coord;&#xa;}&#xa;"/>
     <string name="genericFragHead" val="#version 410&#xa;&#xa;layout(location = 0) out vec4 edges;&#xa;uniform sampler2D image;&#xa;"/>
     <string name="genericFragBody" val="in vec2 texcoord;&#xa;&#xa;const mat3 M = mat3(-1.,-2.,-1.,0.,0.,0.,1.,2.,1.);&#xa;&#xa;void main() {&#xa;&#x9;vec2 ps = 1./vec2(textureSize(image,0));&#xa;&#x9;vec3 gx = vec3(0.);&#xa;&#x9;vec3 gy = vec3(0.);&#xa;&#xa;&#x9;for(int i=-1;i&lt;=1;++i) {&#xa;&#x9;&#x9;for(int j=-1;j&lt;=1;++j) {&#xa;&#x9;&#x9;&#x9;vec3 c = texture(image,texcoord+vec2(i,j)*ps).xyz;&#xa;&#x9;&#x9;&#x9;gx += c*M[i+1][j+1];&#xa;&#x9;&#x9;&#x9;gy += c*M[j+1][i+1];&#xa;&#x9;&#x9;}&#xa;&#x9;}&#xa;&#x9;&#xa;&#x9;vec3 mag = vec3(&#x9;length(vec2(gx.x,gy.x)),&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;length(vec2(gx.y,gy.y)),&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;length(vec2(gx.z,gy.z)));&#xa;&#xa;&#x9;edges = vec4(mag,texture(image,texcoord).w);&#xa;}&#xa;"/>
     <string name="genericTessCHead" val="#version 410&#xa;&#xa;layout(vertices = 4) out;&#xa;uniform sampler2D image;&#xa;"/>
     <string name="genericTessCBody" val="void main(void) {&#xa;&#x9;gl_TessLevelOuter[0] = 1;&#xa;&#x9;gl_TessLevelOuter[1] = 1;&#xa;&#x9;gl_TessLevelOuter[2] = 1;&#xa;&#x9;gl_TessLevelOuter[3] = 1;&#xa;&#x9;gl_TessLevelInner[0] = 1;&#xa;&#x9;gl_TessLevelInner[1] = 1;&#xa;&#x9;gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;&#xa;}&#xa;"/>
     <string name="genericTessEHead" val="#version 410&#xa;&#xa;uniform sampler2D image;&#xa;"/>
     <string name="genericTessEBody" val="layout(quads,equal_spacing) in;&#xa;&#xa;void main() {&#xa;&#x9;vec4 p1 = mix(gl_in[0].gl_Position,gl_in[1].gl_Position,gl_TessCoord.x);&#xa;&#x9;vec4 p2 = mix(gl_in[3].gl_Position,gl_in[2].gl_Position,gl_TessCoord.x);&#xa;&#x9;gl_Position = mix(p1,p2,gl_TessCoord.y);&#xa;}&#xa;"/>
     <string name="genericGeomHead" val="#version 410&#xa;&#xa;layout(triangles) in;&#xa;uniform sampler2D image;&#xa;"/>
     <string name="genericGeomBody" val="layout(triangle_strip, max_vertices = 3) out;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = gl_in[0].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[1].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[2].gl_Position; EmitVertex();&#xa;&#x9;EndPrimitive();&#xa;}"/>
     <vector2f name="genericTSize">
      <float name="0" val="1"/>
      <float name="1" val="1"/>
     </vector2f>
     <vector2f name="genericTOffset">
      <float name="0" val="0"/>
      <float name="1" val="0"/>
     </vector2f>
     <bool name="genericNeedMouse" val="0"/>
     <bool name="genericNeedKeyboard" val="0"/>
     <uint name="genericNbWidgets" val="0"/>
    </IOData>
    <IOData name="nodeWidget-5">
     <uint name="nbChildren" val="0"/>
    </IOData>
    <vector2f name="nodeInputPos-5-0">
     <float name="0" val="56.32"/>
     <float name="1" val="28.16"/>
    </vector2f>
    <vector2f name="nodeOutputPos-5-0">
     <float name="0" val="56.32"/>
     <float name="1" val="28.16"/>
    </vector2f>
   </IOData>
   <float name="scale" val="6.54926"/>
   <vector2f name="offset">
    <float name="0" val="-2806.34"/>
    <float name="1" val="-21978.3"/>
   </vector2f>
   <IOData name="animation">
    <uint name="firstFrame" val="0"/>
    <uint name="lastFrame" val="99"/>
    <uint name="currentFrame" val="0"/>
    <uint name="fps" val="24"/>
   </IOData>
  </IOData>
  <IOData name="animationWidget">
   <vector2i name="animationWidgetSize">
    <int name="0" val="640"/>
    <int name="1" val="480"/>
   </vector2i>
   <IOData name="timelineWidget"/>
  </IOData>
  <IOData name="nodeListWidget"/>
  <IOData name="interactionWidget">
   <float name="scale" val="4.55152"/>
   <vector2f name="offset">
    <float name="0" val="2693.27"/>
    <float name="1" val="489.156"/>
   </vector2f>
  </IOData>
  <IOData name="nodeInterfaceWidget"/>
 </IOData>
</Gratin>
