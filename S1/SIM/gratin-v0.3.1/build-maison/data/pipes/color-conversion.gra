<Gratin type="pipeline">
 <int name="majorVersion" val="0"/>
 <int name="minorVersion" val="3"/>
 <IOData name="mainWindow">
  <IOData name="graphWidget">
   <IOData name="graph">
    <uint name="nbNodes" val="7"/>
    <string name="nodeStringId-0" val="imgLoaderId"/>
    <uint name="nodeVersion-0" val="1"/>
    <string name="nodeName-0" val="loadImage"/>
    <string name="nodePath-0" val="Imaging/"/>
    <string name="nodeDesc-0" val="Image loader"/>
    <string name="nodeHelp-0" val="Load an image."/>
    <uint name="nodeId-0" val="0"/>
    <uint name="nodeGraphId-0" val="0"/>
    <vector2f name="nodePos-0">
     <float name="0" val="-6725.1"/>
     <float name="1" val="-23800.7"/>
    </vector2f>
    <int name="nodeInputNameSize-0" val="0"/>
    <int name="nodeOutputNameSize-0" val="1"/>
    <string name="nodeOutputName-0-0" val="image"/>
    <string name="nodeStringId-1" val="RGB2HSVID"/>
    <uint name="nodeVersion-1" val="1"/>
    <string name="nodeName-1" val="RGB2HSV"/>
    <string name="nodePath-1" val="Imaging/conversion"/>
    <string name="nodeDesc-1" val="RGB to HSV color space"/>
    <string name="nodeHelp-1" val="RGB to HSV color conversion."/>
    <uint name="nodeId-1" val="1"/>
    <uint name="nodeGraphId-1" val="0"/>
    <vector2f name="nodePos-1">
     <float name="0" val="-4762.39"/>
     <float name="1" val="-22980.3"/>
    </vector2f>
    <int name="nodeInputNameSize-1" val="1"/>
    <int name="nodeOutputNameSize-1" val="1"/>
    <string name="nodeInputName-1-0" val="RGBSpace"/>
    <string name="nodeOutputName-1-0" val="HSVSpace"/>
    <string name="nodeStringId-2" val="imgGenericId"/>
    <uint name="nodeVersion-2" val="1"/>
    <string name="nodeName-2" val="genericImage"/>
    <string name="nodePath-2" val="Basic/"/>
    <string name="nodeDesc-2" val="Generic node for image processing"/>
    <string name="nodeHelp-2" val="This node was designed to create custom shaders&#xa;The settings widget allows to modify input, output parameters&#xa;as well as the output image sizes.&#xa;&#xa;WARNING1: you will be able to modify the number of inputs/outputs&#xa;only if the node is entirely disconnected.&#xa;WARNING2: input/output names will not be modified if a custom node is created&#xa;from this node because these names should be edited directly in the setting widget&#xa;WARNING3: modifying the settings of a node will remove all previously&#xa;defined keyframes&#xa;&#xa;* Special data allows to modify the output image (using a multiple of&#xa;the input size, plus an offset vector&#xa;Check use mouse/keyboard if you want to interact with the mouse&#xa;&#xa;* Input data allows to add/remove/displace input data (only if disconnected)&#xa;&#xa;* Output data allows to add/remove/displace output data (only if disconnected)&#xa;&#xa;* Param data allows to add/remove parameters that will automatically be &#xa;included in your shader.&#xa;For each of them you may choose a proper name, type, and min/max/default values.&#xa;Check keyframes if you want your parameter to be accessible&#xa; through the animation widget&#xa;&#xa;In the node interface itself:&#xa;Source tab contains the head and body of your GLSL source (only the body is editable)&#xa;Params tab contains the defined widgets according to your setting choices&#xa;Log tab contains compilation errors&#xa;&#xa;Once your settings and source completed, click on apply to see the result&#xa;"/>
    <uint name="nodeId-2" val="2"/>
    <uint name="nodeGraphId-2" val="0"/>
    <vector2f name="nodePos-2">
     <float name="0" val="-3196.41"/>
     <float name="1" val="-22985.4"/>
    </vector2f>
    <int name="nodeInputNameSize-2" val="1"/>
    <int name="nodeOutputNameSize-2" val="1"/>
    <string name="nodeInputName-2-0" val="img"/>
    <string name="nodeOutputName-2-0" val="modifyHSV"/>
    <string name="nodeStringId-3" val="HSV2RGBID"/>
    <uint name="nodeVersion-3" val="1"/>
    <string name="nodeName-3" val="HSV2RGB"/>
    <string name="nodePath-3" val="Imaging/conversion"/>
    <string name="nodeDesc-3" val="HSV to RGB color space"/>
    <string name="nodeHelp-3" val="HSV to RGB color conversion."/>
    <uint name="nodeId-3" val="3"/>
    <uint name="nodeGraphId-3" val="0"/>
    <vector2f name="nodePos-3">
     <float name="0" val="-1655.51"/>
     <float name="1" val="-22982"/>
    </vector2f>
    <int name="nodeInputNameSize-3" val="1"/>
    <int name="nodeOutputNameSize-3" val="1"/>
    <string name="nodeInputName-3-0" val="HSVSpace"/>
    <string name="nodeOutputName-3-0" val="RGBSpace"/>
    <string name="nodeStringId-4" val="RGB2LAlphaBetaID"/>
    <uint name="nodeVersion-4" val="1"/>
    <string name="nodeName-4" val="RGB2LAlphaBeta"/>
    <string name="nodePath-4" val="Imaging/conversion"/>
    <string name="nodeDesc-4" val="RGB to LAlphaBeta color space"/>
    <string name="nodeHelp-4" val="RGB to LAlphaBeta color conversion."/>
    <uint name="nodeId-4" val="4"/>
    <uint name="nodeGraphId-4" val="0"/>
    <vector2f name="nodePos-4">
     <float name="0" val="-4790.33"/>
     <float name="1" val="-24716.9"/>
    </vector2f>
    <int name="nodeInputNameSize-4" val="1"/>
    <int name="nodeOutputNameSize-4" val="1"/>
    <string name="nodeInputName-4-0" val="RGBSpace"/>
    <string name="nodeOutputName-4-0" val="LAlphaBetaSpace"/>
    <string name="nodeStringId-5" val="imgGenericId"/>
    <uint name="nodeVersion-5" val="1"/>
    <string name="nodeName-5" val="genericImage"/>
    <string name="nodePath-5" val="Basic/"/>
    <string name="nodeDesc-5" val="Generic node for image processing"/>
    <string name="nodeHelp-5" val="This node was designed to create custom shaders&#xa;The settings widget allows to modify input, output parameters&#xa;as well as the output image sizes.&#xa;&#xa;WARNING1: you will be able to modify the number of inputs/outputs&#xa;only if the node is entirely disconnected.&#xa;WARNING2: input/output names will not be modified if a custom node is created&#xa;from this node because these names should be edited directly in the setting widget&#xa;WARNING3: modifying the settings of a node will remove all previously&#xa;defined keyframes&#xa;&#xa;* Special data allows to modify the output image (using a multiple of&#xa;the input size, plus an offset vector&#xa;Check use mouse/keyboard if you want to interact with the mouse&#xa;&#xa;* Input data allows to add/remove/displace input data (only if disconnected)&#xa;&#xa;* Output data allows to add/remove/displace output data (only if disconnected)&#xa;&#xa;* Param data allows to add/remove parameters that will automatically be &#xa;included in your shader.&#xa;For each of them you may choose a proper name, type, and min/max/default values.&#xa;Check keyframes if you want your parameter to be accessible&#xa; through the animation widget&#xa;&#xa;In the node interface itself:&#xa;Source tab contains the head and body of your GLSL source (only the body is editable)&#xa;Params tab contains the defined widgets according to your setting choices&#xa;Log tab contains compilation errors&#xa;&#xa;Once your settings and source completed, click on apply to see the result&#xa;"/>
    <uint name="nodeId-5" val="5"/>
    <uint name="nodeGraphId-5" val="0"/>
    <vector2f name="nodePos-5">
     <float name="0" val="-3214.42"/>
     <float name="1" val="-24708.7"/>
    </vector2f>
    <int name="nodeInputNameSize-5" val="1"/>
    <int name="nodeOutputNameSize-5" val="1"/>
    <string name="nodeInputName-5-0" val="img"/>
    <string name="nodeOutputName-5-0" val="modifyLAlBe"/>
    <string name="nodeStringId-6" val="LAlphaBeta2RGBID"/>
    <uint name="nodeVersion-6" val="1"/>
    <string name="nodeName-6" val="LAlphaBeta2RGB"/>
    <string name="nodePath-6" val="Imaging/conversion"/>
    <string name="nodeDesc-6" val="LAlphaBeta to RGB color space"/>
    <string name="nodeHelp-6" val="LAlphaBeta to RGB color conversion."/>
    <uint name="nodeId-6" val="6"/>
    <uint name="nodeGraphId-6" val="0"/>
    <vector2f name="nodePos-6">
     <float name="0" val="-1644.32"/>
     <float name="1" val="-24701.2"/>
    </vector2f>
    <int name="nodeInputNameSize-6" val="1"/>
    <int name="nodeOutputNameSize-6" val="1"/>
    <string name="nodeInputName-6-0" val="LAlphaBetaSpace"/>
    <string name="nodeOutputName-6-0" val="RGBSpace"/>
    <uint name="nbConnections-0-1" val="1"/>
    <vector2u name="connection-0-1-0">
     <uint name="0" val="0"/>
     <uint name="1" val="0"/>
    </vector2u>
    <uint name="nbConnections-0-2" val="0"/>
    <uint name="nbConnections-0-3" val="0"/>
    <uint name="nbConnections-0-4" val="1"/>
    <vector2u name="connection-0-4-0">
     <uint name="0" val="0"/>
     <uint name="1" val="0"/>
    </vector2u>
    <uint name="nbConnections-0-5" val="0"/>
    <uint name="nbConnections-0-6" val="0"/>
    <uint name="nbConnections-1-2" val="1"/>
    <vector2u name="connection-1-2-0">
     <uint name="0" val="0"/>
     <uint name="1" val="0"/>
    </vector2u>
    <uint name="nbConnections-1-3" val="0"/>
    <uint name="nbConnections-1-4" val="0"/>
    <uint name="nbConnections-1-5" val="0"/>
    <uint name="nbConnections-1-6" val="0"/>
    <uint name="nbConnections-2-3" val="1"/>
    <vector2u name="connection-2-3-0">
     <uint name="0" val="0"/>
     <uint name="1" val="0"/>
    </vector2u>
    <uint name="nbConnections-2-4" val="0"/>
    <uint name="nbConnections-2-5" val="0"/>
    <uint name="nbConnections-2-6" val="0"/>
    <uint name="nbConnections-3-4" val="0"/>
    <uint name="nbConnections-3-5" val="0"/>
    <uint name="nbConnections-3-6" val="0"/>
    <uint name="nbConnections-4-5" val="1"/>
    <vector2u name="connection-4-5-0">
     <uint name="0" val="0"/>
     <uint name="1" val="0"/>
    </vector2u>
    <uint name="nbConnections-4-6" val="0"/>
    <uint name="nbConnections-5-6" val="1"/>
    <vector2u name="connection-5-6-0">
     <uint name="0" val="0"/>
     <uint name="1" val="0"/>
    </vector2u>
    <bool name="nodeHasWidget-0" val="1"/>
    <IOData name="node-0">
     <string name="filename" val="../imgs/flower.jpg"/>
     <vector2i name="size">
      <int name="0" val="1024"/>
      <int name="1" val="1024"/>
     </vector2i>
    </IOData>
    <IOData name="nodeWidget-0">
     <bool name="keepAspectRatio" val="0"/>
     <bool name="keepSize" val="0"/>
    </IOData>
    <vector2f name="nodeOutputPos-0-0">
     <float name="0" val="112.64"/>
     <float name="1" val="56.32"/>
    </vector2f>
    <bool name="nodeHasWidget-1" val="1"/>
    <IOData name="node-1">
     <string name="genericGlslVersion" val="410"/>
     <string name="genericNodeName" val="RGB2HSV"/>
     <bool name="genericUseVertex" val="0"/>
     <bool name="genericUseTesselation" val="0"/>
     <bool name="genericUseGeometry" val="0"/>
     <bool name="genericUseFragment" val="1"/>
     <int name="genericOutFilter" val="9729"/>
     <int name="genericOutWrap" val="33071"/>
     <bool name="genericUseDepthTest" val="0"/>
     <bool name="genericUseBlending" val="0"/>
     <uint name="genericDepthFunc" val="513"/>
     <uint name="genericBlendSrc" val="1"/>
     <uint name="genericBlendDst" val="0"/>
     <vector4f name="genericBackground">
      <float name="0" val="0"/>
      <float name="1" val="0"/>
      <float name="2" val="0"/>
      <float name="3" val="0"/>
     </vector4f>
     <string name="genericVertHead" val="#version 410&#xa;&#xa;layout(location = 0) in vec2 vertex;&#xa;layout(location = 1) in vec2 coord;&#xa;uniform sampler2D RGBSpace;&#xa;"/>
     <string name="genericVertBody" val="out vec2 texcoord;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = vec4(vertex,0,1);&#xa;&#x9;texcoord    = coord;&#xa;}&#xa;"/>
     <string name="genericFragHead" val="#version 410&#xa;&#xa;layout(location = 0) out vec4 HSVSpace;&#xa;uniform sampler2D RGBSpace;&#xa;"/>
     <string name="genericFragBody" val="in vec2 texcoord;&#xa;&#xa;vec3 rgbToHsv(in float r,in float g,in float b) {&#xa;&#x9;const float eps = 1e-15;&#xa;&#xa;&#x9;float h,s,v;&#xa;&#xa;&#x9;v = max(max(r,g),b);&#xa;&#x9;float delta = v-min(min(r,g),b);&#xa;  &#xa;&#x9;if(delta&lt;eps) {&#xa;&#x9;&#x9;s = 0.0;&#xa;&#x9;&#x9;h = 0.0;&#xa;&#x9;} else {&#xa;&#x9;&#x9;s = delta/v;&#xa;    &#xa;&#x9;&#x9;if(r==v)&#x9;&#x9;&#x9;h = (g-b)/delta;&#xa;&#x9;&#x9;else if(g==v)&#x9;&#x9;h = 2.0 + (b-r)/delta;&#xa;&#x9;&#x9;else&#x9;&#x9;&#x9;&#x9;&#x9;h = 4.0 + (r-g)/delta;&#xa;&#xa;&#x9;&#x9;h *= 60.0;&#xa;&#x9;&#x9;if(h&lt;0.0)&#xa;&#x9;&#x9;&#x9;h += 360;&#xa;&#x9;}&#xa;  &#xa;&#x9;return vec3(h,s,v);&#xa;}&#xa;&#xa;void main() {&#xa;&#x9;vec4 color = texture(RGBSpace,texcoord);&#xa;&#x9;HSVSpace = vec4(rgbToHsv(color.r,color.g,color.b),color.w);&#xa;}"/>
     <string name="genericTessCHead" val="#version 410&#xa;&#xa;layout(vertices = 4) out;&#xa;uniform sampler2D RGBSpace;&#xa;"/>
     <string name="genericTessCBody" val="void main(void) {&#xa;&#x9;gl_TessLevelOuter[0] = 1;&#xa;&#x9;gl_TessLevelOuter[1] = 1;&#xa;&#x9;gl_TessLevelOuter[2] = 1;&#xa;&#x9;gl_TessLevelOuter[3] = 1;&#xa;&#x9;gl_TessLevelInner[0] = 1;&#xa;&#x9;gl_TessLevelInner[1] = 1;&#xa;&#x9;gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;&#xa;}&#xa;"/>
     <string name="genericTessEHead" val="#version 410&#xa;&#xa;uniform sampler2D RGBSpace;&#xa;"/>
     <string name="genericTessEBody" val="layout(quads,equal_spacing) in;&#xa;&#xa;void main() {&#xa;&#x9;vec4 p1 = mix(gl_in[0].gl_Position,gl_in[1].gl_Position,gl_TessCoord.x);&#xa;&#x9;vec4 p2 = mix(gl_in[3].gl_Position,gl_in[2].gl_Position,gl_TessCoord.x);&#xa;&#x9;gl_Position = mix(p1,p2,gl_TessCoord.y);&#xa;}&#xa;"/>
     <string name="genericGeomHead" val="#version 410&#xa;&#xa;layout(triangles) in;&#xa;uniform sampler2D RGBSpace;&#xa;"/>
     <string name="genericGeomBody" val="layout(triangle_strip, max_vertices = 3) out;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = gl_in[0].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[1].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[2].gl_Position; EmitVertex();&#xa;&#x9;EndPrimitive();&#xa;}"/>
     <vector2f name="genericTSize">
      <float name="0" val="1"/>
      <float name="1" val="1"/>
     </vector2f>
     <vector2f name="genericTOffset">
      <float name="0" val="0"/>
      <float name="1" val="0"/>
     </vector2f>
     <bool name="genericNeedMouse" val="0"/>
     <bool name="genericNeedKeyboard" val="0"/>
     <uint name="genericNbWidgets" val="0"/>
    </IOData>
    <IOData name="nodeWidget-1">
     <uint name="nbChildren" val="0"/>
    </IOData>
    <vector2f name="nodeInputPos-1-0">
     <float name="0" val="112.64"/>
     <float name="1" val="56.32"/>
    </vector2f>
    <vector2f name="nodeOutputPos-1-0">
     <float name="0" val="112.64"/>
     <float name="1" val="56.32"/>
    </vector2f>
    <bool name="nodeHasWidget-2" val="1"/>
    <IOData name="node-2">
     <string name="genericGlslVersion" val="410"/>
     <string name="genericNodeName" val="genericImage"/>
     <bool name="genericUseVertex" val="0"/>
     <bool name="genericUseTesselation" val="0"/>
     <bool name="genericUseGeometry" val="0"/>
     <bool name="genericUseFragment" val="1"/>
     <int name="genericOutFilter" val="9729"/>
     <int name="genericOutWrap" val="33071"/>
     <bool name="genericUseDepthTest" val="0"/>
     <bool name="genericUseBlending" val="0"/>
     <uint name="genericDepthFunc" val="513"/>
     <uint name="genericBlendSrc" val="1"/>
     <uint name="genericBlendDst" val="0"/>
     <vector4f name="genericBackground">
      <float name="0" val="0"/>
      <float name="1" val="0"/>
      <float name="2" val="0"/>
      <float name="3" val="0"/>
     </vector4f>
     <string name="genericVertHead" val="#version 410&#xa;&#xa;layout(location = 0) in vec2 vertex;&#xa;layout(location = 1) in vec2 coord;&#xa;uniform sampler2D img;&#xa;uniform float offsetH;&#xa;uniform float scaleS;&#xa;uniform float scaleV;&#xa;"/>
     <string name="genericVertBody" val="out vec2 texcoord;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = vec4(vertex,0,1);&#xa;&#x9;texcoord    = coord;&#xa;}&#xa;"/>
     <string name="genericFragHead" val="#version 410&#xa;&#xa;layout(location = 0) out vec4 modifyHSV;&#xa;uniform sampler2D img;&#xa;uniform float offsetH;&#xa;uniform float scaleS;&#xa;uniform float scaleV;&#xa;"/>
     <string name="genericFragBody" val="in vec2 texcoord;&#xa;void main() {&#xa;&#x9;vec4 d = texture(img,texcoord);&#xa;&#xa;&#x9;d.x += mod(offsetH,360.);&#xa;&#x9;d.y *= scaleS;&#xa;&#x9;d.z *= scaleV;&#xa;&#x9;&#xa;&#x9;modifyHSV = d;&#xa;}&#xa;"/>
     <string name="genericTessCHead" val="#version 410&#xa;&#xa;layout(vertices = 4) out;&#xa;uniform sampler2D img;&#xa;uniform float offsetH;&#xa;uniform float scaleS;&#xa;uniform float scaleV;&#xa;"/>
     <string name="genericTessCBody" val="void main(void) {&#xa;&#x9;gl_TessLevelOuter[0] = 1;&#xa;&#x9;gl_TessLevelOuter[1] = 1;&#xa;&#x9;gl_TessLevelOuter[2] = 1;&#xa;&#x9;gl_TessLevelOuter[3] = 1;&#xa;&#x9;gl_TessLevelInner[0] = 1;&#xa;&#x9;gl_TessLevelInner[1] = 1;&#xa;&#x9;gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;&#xa;}&#xa;"/>
     <string name="genericTessEHead" val="#version 410&#xa;&#xa;uniform sampler2D img;&#xa;uniform float offsetH;&#xa;uniform float scaleS;&#xa;uniform float scaleV;&#xa;"/>
     <string name="genericTessEBody" val="layout(quads,equal_spacing) in;&#xa;&#xa;void main() {&#xa;&#x9;vec4 p1 = mix(gl_in[0].gl_Position,gl_in[1].gl_Position,gl_TessCoord.x);&#xa;&#x9;vec4 p2 = mix(gl_in[3].gl_Position,gl_in[2].gl_Position,gl_TessCoord.x);&#xa;&#x9;gl_Position = mix(p1,p2,gl_TessCoord.y);&#xa;}&#xa;"/>
     <string name="genericGeomHead" val="#version 410&#xa;&#xa;layout(triangles) in;&#xa;uniform sampler2D img;&#xa;uniform float offsetH;&#xa;uniform float scaleS;&#xa;uniform float scaleV;&#xa;"/>
     <string name="genericGeomBody" val="layout(triangle_strip, max_vertices = 3) out;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = gl_in[0].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[1].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[2].gl_Position; EmitVertex();&#xa;&#x9;EndPrimitive();&#xa;}"/>
     <vector2f name="genericTSize">
      <float name="0" val="1"/>
      <float name="1" val="1"/>
     </vector2f>
     <vector2f name="genericTOffset">
      <float name="0" val="0"/>
      <float name="1" val="0"/>
     </vector2f>
     <bool name="genericNeedMouse" val="0"/>
     <bool name="genericNeedKeyboard" val="0"/>
     <uint name="genericNbWidgets" val="3"/>
     <int name="genericWidgetType-0" val="0"/>
     <int name="genericWidgetView-0" val="1"/>
     <string name="genericWidgetName-0" val="offsetH"/>
     <bool name="genericWidgetKeyframed-0" val="1"/>
     <int name="genericWidgetType-1" val="0"/>
     <int name="genericWidgetView-1" val="1"/>
     <string name="genericWidgetName-1" val="scaleS"/>
     <bool name="genericWidgetKeyframed-1" val="1"/>
     <int name="genericWidgetType-2" val="0"/>
     <int name="genericWidgetView-2" val="1"/>
     <string name="genericWidgetName-2" val="scaleV"/>
     <bool name="genericWidgetKeyframed-2" val="1"/>
    </IOData>
    <IOData name="nodeWidget-2">
     <uint name="nbChildren" val="3"/>
     <IOData name="childWidget-0">
      <bool name="floatAttribKeyframed" val="1"/>
      <float name="floatAttribMinVal" val="0"/>
      <float name="floatAttribMaxVal" val="360"/>
      <IOData name="floatAttribCurve">
       <float name="currentVal" val="315.36"/>
       <uint name="nbCurves" val="1"/>
       <IOData name="curve-0">
        <int name="interpType" val="0"/>
        <int name="leftType" val="0"/>
        <int name="rightType" val="0"/>
        <IOData name="interpolator">
         <uint name="nbPoints" val="1"/>
         <uint name="nbTangents" val="0"/>
         <vector2f name="controlPoint-0">
          <float name="0" val="0"/>
          <float name="1" val="315.36"/>
         </vector2f>
        </IOData>
       </IOData>
      </IOData>
      <uint name="nbChildren" val="0"/>
     </IOData>
     <IOData name="childWidget-1">
      <bool name="floatAttribKeyframed" val="1"/>
      <float name="floatAttribMinVal" val="0"/>
      <float name="floatAttribMaxVal" val="1"/>
      <IOData name="floatAttribCurve">
       <float name="currentVal" val="0.481"/>
       <uint name="nbCurves" val="1"/>
       <IOData name="curve-0">
        <int name="interpType" val="0"/>
        <int name="leftType" val="0"/>
        <int name="rightType" val="0"/>
        <IOData name="interpolator">
         <uint name="nbPoints" val="1"/>
         <uint name="nbTangents" val="0"/>
         <vector2f name="controlPoint-0">
          <float name="0" val="0"/>
          <float name="1" val="0.481"/>
         </vector2f>
        </IOData>
       </IOData>
      </IOData>
      <uint name="nbChildren" val="0"/>
     </IOData>
     <IOData name="childWidget-2">
      <bool name="floatAttribKeyframed" val="1"/>
      <float name="floatAttribMinVal" val="0"/>
      <float name="floatAttribMaxVal" val="1"/>
      <IOData name="floatAttribCurve">
       <float name="currentVal" val="1"/>
       <uint name="nbCurves" val="1"/>
       <IOData name="curve-0">
        <int name="interpType" val="0"/>
        <int name="leftType" val="0"/>
        <int name="rightType" val="0"/>
        <IOData name="interpolator">
         <uint name="nbPoints" val="1"/>
         <uint name="nbTangents" val="0"/>
         <vector2f name="controlPoint-0">
          <float name="0" val="0"/>
          <float name="1" val="1"/>
         </vector2f>
        </IOData>
       </IOData>
      </IOData>
      <uint name="nbChildren" val="0"/>
     </IOData>
    </IOData>
    <vector2f name="nodeInputPos-2-0">
     <float name="0" val="112.64"/>
     <float name="1" val="56.32"/>
    </vector2f>
    <vector2f name="nodeOutputPos-2-0">
     <float name="0" val="112.64"/>
     <float name="1" val="56.32"/>
    </vector2f>
    <bool name="nodeHasWidget-3" val="1"/>
    <IOData name="node-3">
     <string name="genericGlslVersion" val="410"/>
     <string name="genericNodeName" val="HSV2RGB"/>
     <bool name="genericUseVertex" val="0"/>
     <bool name="genericUseTesselation" val="0"/>
     <bool name="genericUseGeometry" val="0"/>
     <bool name="genericUseFragment" val="1"/>
     <int name="genericOutFilter" val="9729"/>
     <int name="genericOutWrap" val="33071"/>
     <bool name="genericUseDepthTest" val="0"/>
     <bool name="genericUseBlending" val="0"/>
     <uint name="genericDepthFunc" val="513"/>
     <uint name="genericBlendSrc" val="1"/>
     <uint name="genericBlendDst" val="0"/>
     <vector4f name="genericBackground">
      <float name="0" val="0"/>
      <float name="1" val="0"/>
      <float name="2" val="0"/>
      <float name="3" val="0"/>
     </vector4f>
     <string name="genericVertHead" val="#version 410&#xa;&#xa;layout(location = 0) in vec2 vertex;&#xa;layout(location = 1) in vec2 coord;&#xa;uniform sampler2D HSVSpace;&#xa;"/>
     <string name="genericVertBody" val="out vec2 texcoord;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = vec4(vertex,0,1);&#xa;&#x9;texcoord    = coord;&#xa;}&#xa;"/>
     <string name="genericFragHead" val="#version 410&#xa;&#xa;layout(location = 0) out vec4 RGBSpace;&#xa;uniform sampler2D HSVSpace;&#xa;"/>
     <string name="genericFragBody" val="in vec2 texcoord;&#xa;&#xa;vec3 hsvToRgb(in float h,in float s,in float v) {&#xa;&#x9;vec3 rgb;&#xa;&#x9;int hi = int(floor(h/60.0))%6;&#xa;&#x9;float f = h/60.0 - floor(h/60.0);&#xa;&#x9;float p = v*(1.0-s);&#xa;&#x9;float q = v*(1.0-f*s);&#xa;&#x9;float t = v*(1.0-(1.0-f)*s);&#xa;&#xa;&#x9;if(hi==0) rgb = vec3(v,t,p);&#xa;&#x9;else if(hi==1) rgb = vec3(q,v,p);&#xa;&#x9;else if(hi==2) rgb = vec3(p,v,t);&#xa;&#x9;else if(hi==3) rgb = vec3(p,q,v);&#xa;&#x9;else if(hi==4) rgb = vec3(t,p,v);&#xa;&#x9;else rgb = vec3(v,p,q);&#xa;&#xa;&#x9;return rgb;&#xa;}&#xa;&#xa;void main() {&#xa;&#x9;vec4 color = texture(HSVSpace,texcoord);&#xa;&#x9;RGBSpace = vec4(hsvToRgb(color.x,color.y,color.z),color.w);&#xa;}"/>
     <string name="genericTessCHead" val="#version 410&#xa;&#xa;layout(vertices = 4) out;&#xa;uniform sampler2D HSVSpace;&#xa;"/>
     <string name="genericTessCBody" val="void main(void) {&#xa;&#x9;gl_TessLevelOuter[0] = 1;&#xa;&#x9;gl_TessLevelOuter[1] = 1;&#xa;&#x9;gl_TessLevelOuter[2] = 1;&#xa;&#x9;gl_TessLevelOuter[3] = 1;&#xa;&#x9;gl_TessLevelInner[0] = 1;&#xa;&#x9;gl_TessLevelInner[1] = 1;&#xa;&#x9;gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;&#xa;}&#xa;"/>
     <string name="genericTessEHead" val="#version 410&#xa;&#xa;uniform sampler2D HSVSpace;&#xa;"/>
     <string name="genericTessEBody" val="layout(quads,equal_spacing) in;&#xa;&#xa;void main() {&#xa;&#x9;vec4 p1 = mix(gl_in[0].gl_Position,gl_in[1].gl_Position,gl_TessCoord.x);&#xa;&#x9;vec4 p2 = mix(gl_in[3].gl_Position,gl_in[2].gl_Position,gl_TessCoord.x);&#xa;&#x9;gl_Position = mix(p1,p2,gl_TessCoord.y);&#xa;}&#xa;"/>
     <string name="genericGeomHead" val="#version 410&#xa;&#xa;layout(triangles) in;&#xa;uniform sampler2D HSVSpace;&#xa;"/>
     <string name="genericGeomBody" val="layout(triangle_strip, max_vertices = 3) out;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = gl_in[0].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[1].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[2].gl_Position; EmitVertex();&#xa;&#x9;EndPrimitive();&#xa;}"/>
     <vector2f name="genericTSize">
      <float name="0" val="1"/>
      <float name="1" val="1"/>
     </vector2f>
     <vector2f name="genericTOffset">
      <float name="0" val="0"/>
      <float name="1" val="0"/>
     </vector2f>
     <bool name="genericNeedMouse" val="0"/>
     <bool name="genericNeedKeyboard" val="0"/>
     <uint name="genericNbWidgets" val="0"/>
    </IOData>
    <IOData name="nodeWidget-3">
     <uint name="nbChildren" val="0"/>
    </IOData>
    <vector2f name="nodeInputPos-3-0">
     <float name="0" val="112.64"/>
     <float name="1" val="56.32"/>
    </vector2f>
    <vector2f name="nodeOutputPos-3-0">
     <float name="0" val="112.64"/>
     <float name="1" val="56.32"/>
    </vector2f>
    <bool name="nodeHasWidget-4" val="1"/>
    <IOData name="node-4">
     <string name="genericGlslVersion" val="410"/>
     <string name="genericNodeName" val="RGB2LAlphaBeta"/>
     <bool name="genericUseVertex" val="0"/>
     <bool name="genericUseTesselation" val="0"/>
     <bool name="genericUseGeometry" val="0"/>
     <bool name="genericUseFragment" val="1"/>
     <int name="genericOutFilter" val="9729"/>
     <int name="genericOutWrap" val="33071"/>
     <bool name="genericUseDepthTest" val="0"/>
     <bool name="genericUseBlending" val="0"/>
     <uint name="genericDepthFunc" val="513"/>
     <uint name="genericBlendSrc" val="1"/>
     <uint name="genericBlendDst" val="0"/>
     <vector4f name="genericBackground">
      <float name="0" val="0"/>
      <float name="1" val="0"/>
      <float name="2" val="0"/>
      <float name="3" val="0"/>
     </vector4f>
     <string name="genericVertHead" val="#version 410&#xa;&#xa;layout(location = 0) in vec2 vertex;&#xa;layout(location = 1) in vec2 coord;&#xa;uniform sampler2D RGBSpace;&#xa;"/>
     <string name="genericVertBody" val="out vec2 texcoord;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = vec4(vertex,0,1);&#xa;&#x9;texcoord    = coord;&#xa;}&#xa;"/>
     <string name="genericFragHead" val="#version 410&#xa;&#xa;layout(location = 0) out vec4 LAlphaBetaSpace;&#xa;uniform sampler2D RGBSpace;&#xa;"/>
     <string name="genericFragBody" val="in vec2 texcoord;&#xa;&#xa;float rescale(in float x) {&#xa;&#x9;return log(x+1e-10);&#xa;}&#xa;&#xa;void main() {&#xa;&#x9;vec4 rgba = texture(RGBSpace,texcoord);&#xa;&#x9;vec3 lms,lab;&#xa;&#xa;&#x9;lms.x = rescale(0.3811*rgba.x+0.5783*rgba.y+0.0402*rgba.z);&#xa;&#x9;lms.y = rescale(0.1967*rgba.x+0.7244*rgba.y+0.0782*rgba.z);&#xa;&#x9;lms.z = rescale(0.0241*rgba.x+0.1288*rgba.y+0.8444*rgba.z);&#xa;&#xa;&#x9;lab.x = inversesqrt(3.0)*(lms.x+lms.y+lms.z);&#xa;&#x9;lab.y = inversesqrt(6.0)*(lms.x+lms.y-2.0*lms.z);&#xa;&#x9;lab.z = inversesqrt(2.0)*(lms.x-lms.y);&#xa;&#xa;&#x9;LAlphaBetaSpace = vec4(lab.xyz,rgba.w);&#xa;}"/>
     <string name="genericTessCHead" val="#version 410&#xa;&#xa;layout(vertices = 4) out;&#xa;uniform sampler2D RGBSpace;&#xa;"/>
     <string name="genericTessCBody" val="void main(void) {&#xa;&#x9;gl_TessLevelOuter[0] = 1;&#xa;&#x9;gl_TessLevelOuter[1] = 1;&#xa;&#x9;gl_TessLevelOuter[2] = 1;&#xa;&#x9;gl_TessLevelOuter[3] = 1;&#xa;&#x9;gl_TessLevelInner[0] = 1;&#xa;&#x9;gl_TessLevelInner[1] = 1;&#xa;&#x9;gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;&#xa;}&#xa;"/>
     <string name="genericTessEHead" val="#version 410&#xa;&#xa;uniform sampler2D RGBSpace;&#xa;"/>
     <string name="genericTessEBody" val="layout(quads,equal_spacing) in;&#xa;&#xa;void main() {&#xa;&#x9;vec4 p1 = mix(gl_in[0].gl_Position,gl_in[1].gl_Position,gl_TessCoord.x);&#xa;&#x9;vec4 p2 = mix(gl_in[3].gl_Position,gl_in[2].gl_Position,gl_TessCoord.x);&#xa;&#x9;gl_Position = mix(p1,p2,gl_TessCoord.y);&#xa;}&#xa;"/>
     <string name="genericGeomHead" val="#version 410&#xa;&#xa;layout(triangles) in;&#xa;uniform sampler2D RGBSpace;&#xa;"/>
     <string name="genericGeomBody" val="layout(triangle_strip, max_vertices = 3) out;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = gl_in[0].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[1].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[2].gl_Position; EmitVertex();&#xa;&#x9;EndPrimitive();&#xa;}"/>
     <vector2f name="genericTSize">
      <float name="0" val="1"/>
      <float name="1" val="1"/>
     </vector2f>
     <vector2f name="genericTOffset">
      <float name="0" val="0"/>
      <float name="1" val="0"/>
     </vector2f>
     <bool name="genericNeedMouse" val="0"/>
     <bool name="genericNeedKeyboard" val="0"/>
     <uint name="genericNbWidgets" val="0"/>
    </IOData>
    <IOData name="nodeWidget-4">
     <uint name="nbChildren" val="0"/>
    </IOData>
    <vector2f name="nodeInputPos-4-0">
     <float name="0" val="112.64"/>
     <float name="1" val="56.32"/>
    </vector2f>
    <vector2f name="nodeOutputPos-4-0">
     <float name="0" val="112.64"/>
     <float name="1" val="56.32"/>
    </vector2f>
    <bool name="nodeHasWidget-5" val="1"/>
    <IOData name="node-5">
     <string name="genericGlslVersion" val="410"/>
     <string name="genericNodeName" val="genericImage"/>
     <bool name="genericUseVertex" val="0"/>
     <bool name="genericUseTesselation" val="0"/>
     <bool name="genericUseGeometry" val="0"/>
     <bool name="genericUseFragment" val="1"/>
     <int name="genericOutFilter" val="9729"/>
     <int name="genericOutWrap" val="33071"/>
     <bool name="genericUseDepthTest" val="0"/>
     <bool name="genericUseBlending" val="0"/>
     <uint name="genericDepthFunc" val="513"/>
     <uint name="genericBlendSrc" val="1"/>
     <uint name="genericBlendDst" val="0"/>
     <vector4f name="genericBackground">
      <float name="0" val="0"/>
      <float name="1" val="0"/>
      <float name="2" val="0"/>
      <float name="3" val="0"/>
     </vector4f>
     <string name="genericVertHead" val="#version 410&#xa;&#xa;layout(location = 0) in vec2 vertex;&#xa;layout(location = 1) in vec2 coord;&#xa;uniform sampler2D img;&#xa;uniform float scaleLum;&#xa;uniform float scaleAlpha;&#xa;uniform float scaleBeta;&#xa;"/>
     <string name="genericVertBody" val="out vec2 texcoord;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = vec4(vertex,0,1);&#xa;&#x9;texcoord    = coord;&#xa;}&#xa;"/>
     <string name="genericFragHead" val="#version 410&#xa;&#xa;layout(location = 0) out vec4 modifyLAlBe;&#xa;uniform sampler2D img;&#xa;uniform float scaleLum;&#xa;uniform float scaleAlpha;&#xa;uniform float scaleBeta;&#xa;"/>
     <string name="genericFragBody" val="in vec2 texcoord;&#xa;void main() {&#xa;&#x9;vec4 d = texture(img,texcoord);&#xa;&#xa;&#x9;d.xyz *= vec3(scaleLum,scaleAlpha,scaleBeta);&#xa;&#x9;&#xa;&#x9;modifyLAlBe = d;&#xa;}&#xa;"/>
     <string name="genericTessCHead" val="#version 410&#xa;&#xa;layout(vertices = 4) out;&#xa;uniform sampler2D img;&#xa;uniform float scaleLum;&#xa;uniform float scaleAlpha;&#xa;uniform float scaleBeta;&#xa;"/>
     <string name="genericTessCBody" val="void main(void) {&#xa;&#x9;gl_TessLevelOuter[0] = 1;&#xa;&#x9;gl_TessLevelOuter[1] = 1;&#xa;&#x9;gl_TessLevelOuter[2] = 1;&#xa;&#x9;gl_TessLevelOuter[3] = 1;&#xa;&#x9;gl_TessLevelInner[0] = 1;&#xa;&#x9;gl_TessLevelInner[1] = 1;&#xa;&#x9;gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;&#xa;}&#xa;"/>
     <string name="genericTessEHead" val="#version 410&#xa;&#xa;uniform sampler2D img;&#xa;uniform float scaleLum;&#xa;uniform float scaleAlpha;&#xa;uniform float scaleBeta;&#xa;"/>
     <string name="genericTessEBody" val="layout(quads,equal_spacing) in;&#xa;&#xa;void main() {&#xa;&#x9;vec4 p1 = mix(gl_in[0].gl_Position,gl_in[1].gl_Position,gl_TessCoord.x);&#xa;&#x9;vec4 p2 = mix(gl_in[3].gl_Position,gl_in[2].gl_Position,gl_TessCoord.x);&#xa;&#x9;gl_Position = mix(p1,p2,gl_TessCoord.y);&#xa;}&#xa;"/>
     <string name="genericGeomHead" val="#version 410&#xa;&#xa;layout(triangles) in;&#xa;uniform sampler2D img;&#xa;uniform float scaleLum;&#xa;uniform float scaleAlpha;&#xa;uniform float scaleBeta;&#xa;"/>
     <string name="genericGeomBody" val="layout(triangle_strip, max_vertices = 3) out;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = gl_in[0].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[1].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[2].gl_Position; EmitVertex();&#xa;&#x9;EndPrimitive();&#xa;}"/>
     <vector2f name="genericTSize">
      <float name="0" val="1"/>
      <float name="1" val="1"/>
     </vector2f>
     <vector2f name="genericTOffset">
      <float name="0" val="0"/>
      <float name="1" val="0"/>
     </vector2f>
     <bool name="genericNeedMouse" val="0"/>
     <bool name="genericNeedKeyboard" val="0"/>
     <uint name="genericNbWidgets" val="3"/>
     <int name="genericWidgetType-0" val="0"/>
     <int name="genericWidgetView-0" val="1"/>
     <string name="genericWidgetName-0" val="scaleLum"/>
     <bool name="genericWidgetKeyframed-0" val="1"/>
     <int name="genericWidgetType-1" val="0"/>
     <int name="genericWidgetView-1" val="1"/>
     <string name="genericWidgetName-1" val="scaleAlpha"/>
     <bool name="genericWidgetKeyframed-1" val="1"/>
     <int name="genericWidgetType-2" val="0"/>
     <int name="genericWidgetView-2" val="1"/>
     <string name="genericWidgetName-2" val="scaleBeta"/>
     <bool name="genericWidgetKeyframed-2" val="1"/>
    </IOData>
    <IOData name="nodeWidget-5">
     <uint name="nbChildren" val="3"/>
     <IOData name="childWidget-0">
      <bool name="floatAttribKeyframed" val="1"/>
      <float name="floatAttribMinVal" val="0"/>
      <float name="floatAttribMaxVal" val="10"/>
      <IOData name="floatAttribCurve">
       <float name="currentVal" val="0.81"/>
       <uint name="nbCurves" val="1"/>
       <IOData name="curve-0">
        <int name="interpType" val="0"/>
        <int name="leftType" val="0"/>
        <int name="rightType" val="0"/>
        <IOData name="interpolator">
         <uint name="nbPoints" val="1"/>
         <uint name="nbTangents" val="0"/>
         <vector2f name="controlPoint-0">
          <float name="0" val="0"/>
          <float name="1" val="0.81"/>
         </vector2f>
        </IOData>
       </IOData>
      </IOData>
      <uint name="nbChildren" val="0"/>
     </IOData>
     <IOData name="childWidget-1">
      <bool name="floatAttribKeyframed" val="1"/>
      <float name="floatAttribMinVal" val="-1"/>
      <float name="floatAttribMaxVal" val="1"/>
      <IOData name="floatAttribCurve">
       <float name="currentVal" val="0.43"/>
       <uint name="nbCurves" val="1"/>
       <IOData name="curve-0">
        <int name="interpType" val="0"/>
        <int name="leftType" val="0"/>
        <int name="rightType" val="0"/>
        <IOData name="interpolator">
         <uint name="nbPoints" val="1"/>
         <uint name="nbTangents" val="0"/>
         <vector2f name="controlPoint-0">
          <float name="0" val="0"/>
          <float name="1" val="0.43"/>
         </vector2f>
        </IOData>
       </IOData>
      </IOData>
      <uint name="nbChildren" val="0"/>
     </IOData>
     <IOData name="childWidget-2">
      <bool name="floatAttribKeyframed" val="1"/>
      <float name="floatAttribMinVal" val="-1"/>
      <float name="floatAttribMaxVal" val="1"/>
      <IOData name="floatAttribCurve">
       <float name="currentVal" val="-0.926"/>
       <uint name="nbCurves" val="1"/>
       <IOData name="curve-0">
        <int name="interpType" val="0"/>
        <int name="leftType" val="0"/>
        <int name="rightType" val="0"/>
        <IOData name="interpolator">
         <uint name="nbPoints" val="1"/>
         <uint name="nbTangents" val="0"/>
         <vector2f name="controlPoint-0">
          <float name="0" val="0"/>
          <float name="1" val="-0.926"/>
         </vector2f>
        </IOData>
       </IOData>
      </IOData>
      <uint name="nbChildren" val="0"/>
     </IOData>
    </IOData>
    <vector2f name="nodeInputPos-5-0">
     <float name="0" val="112.64"/>
     <float name="1" val="56.32"/>
    </vector2f>
    <vector2f name="nodeOutputPos-5-0">
     <float name="0" val="112.64"/>
     <float name="1" val="56.32"/>
    </vector2f>
    <bool name="nodeHasWidget-6" val="1"/>
    <IOData name="node-6">
     <string name="genericGlslVersion" val="410"/>
     <string name="genericNodeName" val="LAlphaBeta2RGB"/>
     <bool name="genericUseVertex" val="0"/>
     <bool name="genericUseTesselation" val="0"/>
     <bool name="genericUseGeometry" val="0"/>
     <bool name="genericUseFragment" val="1"/>
     <int name="genericOutFilter" val="9729"/>
     <int name="genericOutWrap" val="33071"/>
     <bool name="genericUseDepthTest" val="0"/>
     <bool name="genericUseBlending" val="0"/>
     <uint name="genericDepthFunc" val="513"/>
     <uint name="genericBlendSrc" val="1"/>
     <uint name="genericBlendDst" val="0"/>
     <vector4f name="genericBackground">
      <float name="0" val="0"/>
      <float name="1" val="0"/>
      <float name="2" val="0"/>
      <float name="3" val="0"/>
     </vector4f>
     <string name="genericVertHead" val="#version 410&#xa;&#xa;layout(location = 0) in vec2 vertex;&#xa;layout(location = 1) in vec2 coord;&#xa;uniform sampler2D LAlphaBetaSpace;&#xa;"/>
     <string name="genericVertBody" val="out vec2 texcoord;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = vec4(vertex,0,1);&#xa;&#x9;texcoord    = coord;&#xa;}&#xa;"/>
     <string name="genericFragHead" val="#version 410&#xa;&#xa;layout(location = 0) out vec4 RGBSpace;&#xa;uniform sampler2D LAlphaBetaSpace;&#xa;"/>
     <string name="genericFragBody" val="in vec2 texcoord;&#xa;&#xa;float rescale(in float x) {&#xa;&#x9;return exp(x) - 1e-10;&#xa;}&#xa;&#xa;void main() {&#xa;&#x9;vec4 laba = texture(LAlphaBetaSpace,texcoord);&#xa;&#x9;vec3 lms,rgb;&#xa;&#xa;&#x9;float i1 = sqrt(3.0)/3.0;&#xa;&#x9;float i2 = sqrt(6.0)/6.0;&#xa;&#x9;float i3 = sqrt(2.0)/2.0;&#xa;&#xa;&#x9;lms.x = rescale(i1*laba.x+i2*laba.y+i3*laba.z);&#xa;&#x9;lms.y = rescale(i1*laba.x+i2*laba.y-i3*laba.z);&#xa;&#x9;lms.z = rescale(i1*laba.x-2.0*i2*laba.y);&#xa;&#xa;&#x9;rgb.x = 4.4679*lms.x-3.5873*lms.y+0.1193*lms.z;&#xa;&#x9;rgb.y = -1.2186*lms.x+2.3809*lms.y-0.1624*lms.z;&#xa;&#x9;rgb.z = 0.0497*lms.x-0.2439*lms.y+1.2045*lms.z;&#xa;&#xa;&#x9;RGBSpace = vec4(rgb,laba.w);&#xa;}"/>
     <string name="genericTessCHead" val="#version 410&#xa;&#xa;layout(vertices = 4) out;&#xa;uniform sampler2D LAlphaBetaSpace;&#xa;"/>
     <string name="genericTessCBody" val="void main(void) {&#xa;&#x9;gl_TessLevelOuter[0] = 1;&#xa;&#x9;gl_TessLevelOuter[1] = 1;&#xa;&#x9;gl_TessLevelOuter[2] = 1;&#xa;&#x9;gl_TessLevelOuter[3] = 1;&#xa;&#x9;gl_TessLevelInner[0] = 1;&#xa;&#x9;gl_TessLevelInner[1] = 1;&#xa;&#x9;gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;&#xa;}&#xa;"/>
     <string name="genericTessEHead" val="#version 410&#xa;&#xa;uniform sampler2D LAlphaBetaSpace;&#xa;"/>
     <string name="genericTessEBody" val="layout(quads,equal_spacing) in;&#xa;&#xa;void main() {&#xa;&#x9;vec4 p1 = mix(gl_in[0].gl_Position,gl_in[1].gl_Position,gl_TessCoord.x);&#xa;&#x9;vec4 p2 = mix(gl_in[3].gl_Position,gl_in[2].gl_Position,gl_TessCoord.x);&#xa;&#x9;gl_Position = mix(p1,p2,gl_TessCoord.y);&#xa;}&#xa;"/>
     <string name="genericGeomHead" val="#version 410&#xa;&#xa;layout(triangles) in;&#xa;uniform sampler2D LAlphaBetaSpace;&#xa;"/>
     <string name="genericGeomBody" val="layout(triangle_strip, max_vertices = 3) out;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = gl_in[0].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[1].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[2].gl_Position; EmitVertex();&#xa;&#x9;EndPrimitive();&#xa;}"/>
     <vector2f name="genericTSize">
      <float name="0" val="1"/>
      <float name="1" val="1"/>
     </vector2f>
     <vector2f name="genericTOffset">
      <float name="0" val="0"/>
      <float name="1" val="0"/>
     </vector2f>
     <bool name="genericNeedMouse" val="0"/>
     <bool name="genericNeedKeyboard" val="0"/>
     <uint name="genericNbWidgets" val="0"/>
    </IOData>
    <IOData name="nodeWidget-6">
     <uint name="nbChildren" val="0"/>
    </IOData>
    <vector2f name="nodeInputPos-6-0">
     <float name="0" val="112.64"/>
     <float name="1" val="56.32"/>
    </vector2f>
    <vector2f name="nodeOutputPos-6-0">
     <float name="0" val="112.64"/>
     <float name="1" val="56.32"/>
    </vector2f>
   </IOData>
   <float name="scale" val="7.14872"/>
   <vector2f name="offset">
    <float name="0" val="-3366.07"/>
    <float name="1" val="-23191.8"/>
   </vector2f>
   <IOData name="animation">
    <uint name="firstFrame" val="0"/>
    <uint name="lastFrame" val="99"/>
    <uint name="currentFrame" val="0"/>
    <uint name="fps" val="24"/>
   </IOData>
  </IOData>
  <IOData name="animationWidget">
   <vector2i name="animationWidgetSize">
    <int name="0" val="640"/>
    <int name="1" val="480"/>
   </vector2i>
   <IOData name="timelineWidget"/>
  </IOData>
  <IOData name="nodeListWidget"/>
  <IOData name="interactionWidget">
   <float name="scale" val="1.37825"/>
   <vector2f name="offset">
    <float name="0" val="1071.73"/>
    <float name="1" val="221.023"/>
   </vector2f>
  </IOData>
  <IOData name="nodeInterfaceWidget"/>
 </IOData>
</Gratin>
