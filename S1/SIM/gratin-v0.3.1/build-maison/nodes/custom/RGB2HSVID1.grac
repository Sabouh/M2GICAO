<Gratin type="node">
 <int val="0" name="majorVersion"/>
 <int val="3" name="minorVersion"/>
 <string val="imgGenericId" name="coreHandleStringId"/>
 <uint val="1" name="coreHandleVersion"/>
 <string val="RGB2HSVID" name="nodeStringId-0"/>
 <uint val="1" name="nodeVersion-0"/>
 <string val="RGB2HSV" name="nodeName-0"/>
 <string val="Imaging/conversion" name="nodePath-0"/>
 <string val="RGB to HSV color space" name="nodeDesc-0"/>
 <string val="RGB to HSV color conversion." name="nodeHelp-0"/>
 <uint val="20" name="nodeId-0"/>
 <uint val="2" name="nodeGraphId-0"/>
 <vector2f name="nodePos-0">
  <float val="121.818" name="0"/>
  <float val="-8248.45" name="1"/>
 </vector2f>
 <int val="1" name="nodeInputNameSize-0"/>
 <int val="1" name="nodeOutputNameSize-0"/>
 <string val="RGBSpace" name="nodeInputName-0-0"/>
 <string val="HSVSpace" name="nodeOutputName-0-0"/>
 <bool val="1" name="nodeHasWidget-0"/>
 <IOData name="node-0">
  <string val="410" name="genericGlslVersion"/>
  <string val="RGB2HSV" name="genericNodeName"/>
  <bool val="0" name="genericUseVertex"/>
  <bool val="0" name="genericUseTesselation"/>
  <bool val="0" name="genericUseGeometry"/>
  <bool val="1" name="genericUseFragment"/>
  <int val="9729" name="genericOutFilter"/>
  <int val="33071" name="genericOutWrap"/>
  <bool val="0" name="genericUseDepthTest"/>
  <bool val="0" name="genericUseBlending"/>
  <uint val="513" name="genericDepthFunc"/>
  <uint val="1" name="genericBlendSrc"/>
  <uint val="0" name="genericBlendDst"/>
  <vector4f name="genericBackground">
   <float val="0" name="0"/>
   <float val="0" name="1"/>
   <float val="0" name="2"/>
   <float val="0" name="3"/>
  </vector4f>
  <string val="#version 410&#xa;&#xa;layout(location = 0) in vec2 vertex;&#xa;layout(location = 1) in vec2 coord;&#xa;uniform sampler2D RGBSpace;&#xa;" name="genericVertHead"/>
  <string val="out vec2 texcoord;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = vec4(vertex,0,1);&#xa;&#x9;texcoord    = coord;&#xa;}&#xa;" name="genericVertBody"/>
  <string val="#version 410&#xa;&#xa;layout(location = 0) out vec4 HSVSpace;&#xa;uniform sampler2D RGBSpace;&#xa;" name="genericFragHead"/>
  <string val="in vec2 texcoord;&#xa;&#xa;vec3 rgbToHsv(in float r,in float g,in float b) {&#xa;&#x9;const float eps = 1e-15;&#xa;&#xa;&#x9;float h,s,v;&#xa;&#xa;&#x9;v = max(max(r,g),b);&#xa;&#x9;float delta = v-min(min(r,g),b);&#xa;  &#xa;&#x9;if(delta&lt;eps) {&#xa;&#x9;&#x9;s = 0.0;&#xa;&#x9;&#x9;h = 0.0;&#xa;&#x9;} else {&#xa;&#x9;&#x9;s = delta/v;&#xa;    &#xa;&#x9;&#x9;if(r==v)&#x9;&#x9;&#x9;h = (g-b)/delta;&#xa;&#x9;&#x9;else if(g==v)&#x9;&#x9;h = 2.0 + (b-r)/delta;&#xa;&#x9;&#x9;else&#x9;&#x9;&#x9;&#x9;&#x9;h = 4.0 + (r-g)/delta;&#xa;&#xa;&#x9;&#x9;h *= 60.0;&#xa;&#x9;&#x9;if(h&lt;0.0)&#xa;&#x9;&#x9;&#x9;h += 360;&#xa;&#x9;}&#xa;  &#xa;&#x9;return vec3(h,s,v);&#xa;}&#xa;&#xa;void main() {&#xa;&#x9;vec4 color = texture(RGBSpace,texcoord);&#xa;&#x9;HSVSpace = vec4(rgbToHsv(color.r,color.g,color.b),color.w);&#xa;}" name="genericFragBody"/>
  <string val="#version 410&#xa;&#xa;layout(vertices = 4) out;&#xa;uniform sampler2D RGBSpace;&#xa;" name="genericTessCHead"/>
  <string val="void main(void) {&#xa;&#x9;gl_TessLevelOuter[0] = 1;&#xa;&#x9;gl_TessLevelOuter[1] = 1;&#xa;&#x9;gl_TessLevelOuter[2] = 1;&#xa;&#x9;gl_TessLevelOuter[3] = 1;&#xa;&#x9;gl_TessLevelInner[0] = 1;&#xa;&#x9;gl_TessLevelInner[1] = 1;&#xa;&#x9;gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;&#xa;}&#xa;" name="genericTessCBody"/>
  <string val="#version 410&#xa;&#xa;uniform sampler2D RGBSpace;&#xa;" name="genericTessEHead"/>
  <string val="layout(quads,equal_spacing) in;&#xa;&#xa;void main() {&#xa;&#x9;vec4 p1 = mix(gl_in[0].gl_Position,gl_in[1].gl_Position,gl_TessCoord.x);&#xa;&#x9;vec4 p2 = mix(gl_in[3].gl_Position,gl_in[2].gl_Position,gl_TessCoord.x);&#xa;&#x9;gl_Position = mix(p1,p2,gl_TessCoord.y);&#xa;}&#xa;" name="genericTessEBody"/>
  <string val="#version 410&#xa;&#xa;layout(triangles) in;&#xa;uniform sampler2D RGBSpace;&#xa;" name="genericGeomHead"/>
  <string val="layout(triangle_strip, max_vertices = 3) out;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = gl_in[0].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[1].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[2].gl_Position; EmitVertex();&#xa;&#x9;EndPrimitive();&#xa;}" name="genericGeomBody"/>
  <vector2f name="genericTSize">
   <float val="1" name="0"/>
   <float val="1" name="1"/>
  </vector2f>
  <vector2f name="genericTOffset">
   <float val="0" name="0"/>
   <float val="0" name="1"/>
  </vector2f>
  <bool val="0" name="genericNeedMouse"/>
  <bool val="0" name="genericNeedKeyboard"/>
  <uint val="0" name="genericNbWidgets"/>
 </IOData>
 <IOData name="nodeWidget-0">
  <uint val="0" name="nbChildren"/>
 </IOData>
 <vector2f name="nodeInputPos-0-0">
  <float val="56.32" name="0"/>
  <float val="28.16" name="1"/>
 </vector2f>
 <vector2f name="nodeOutputPos-0-0">
  <float val="56.32" name="0"/>
  <float val="28.16" name="1"/>
 </vector2f>
</Gratin>
