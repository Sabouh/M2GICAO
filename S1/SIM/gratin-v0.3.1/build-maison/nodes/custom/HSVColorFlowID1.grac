<Gratin type="node">
 <int val="0" name="majorVersion"/>
 <int val="3" name="minorVersion"/>
 <string val="lineIntegralConvID" name="coreHandleStringId"/>
 <uint val="1" name="coreHandleVersion"/>
 <string val="HSVColorFlowID" name="nodeStringId-0"/>
 <uint val="1" name="nodeVersion-0"/>
 <string val="HSVColorFlow" name="nodeName-0"/>
 <string val="Visualization/" name="nodePath-0"/>
 <string val="Visualize a given flow field using HSV colors" name="nodeDesc-0"/>
 <string val="The input is the flow field.&#xa;The scale parameter rescales the flow magnitude. &#xa;The hue changes according to the flow orientation. &#xa;The saturation changes according to the flow magnitude. &#xa;The value is constant (1).&#xa;The alpha value is kept unchanged here. " name="nodeHelp-0"/>
 <uint val="5" name="nodeId-0"/>
 <uint val="0" name="nodeGraphId-0"/>
 <vector2f name="nodePos-0">
  <float val="2666.14" name="0"/>
  <float val="-767.688" name="1"/>
 </vector2f>
 <int val="1" name="nodeInputNameSize-0"/>
 <int val="1" name="nodeOutputNameSize-0"/>
 <string val="flowField" name="nodeInputName-0-0"/>
 <string val="coloredFlow" name="nodeOutputName-0-0"/>
 <bool val="1" name="nodeHasWidget-0"/>
 <IOData name="node-0">
  <string val="410" name="genericGlslVersion"/>
  <string val="HSVColorFlow" name="genericNodeName"/>
  <bool val="0" name="genericUseVertex"/>
  <bool val="0" name="genericUseTesselation"/>
  <bool val="0" name="genericUseGeometry"/>
  <bool val="1" name="genericUseFragment"/>
  <int val="9729" name="genericOutFilter"/>
  <int val="33071" name="genericOutWrap"/>
  <bool val="0" name="genericUseDepthTest"/>
  <bool val="0" name="genericUseBlending"/>
  <uint val="513" name="genericDepthFunc"/>
  <uint val="1" name="genericBlendSrc"/>
  <uint val="0" name="genericBlendDst"/>
  <vector4f name="genericBackground">
   <float val="0" name="0"/>
   <float val="0" name="1"/>
   <float val="0" name="2"/>
   <float val="0" name="3"/>
  </vector4f>
  <string val="#version 410&#xa;&#xa;layout(location = 0) in vec2 vertex;&#xa;layout(location = 1) in vec2 coord;&#xa;uniform sampler2D flowField;&#xa;uniform float scale;&#xa;uniform int symetric;&#xa;" name="genericVertHead"/>
  <string val="out vec2 texcoord;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = vec4(vertex,0,1);&#xa;&#x9;texcoord    = coord;&#xa;}&#xa;" name="genericVertBody"/>
  <string val="#version 410&#xa;&#xa;layout(location = 0) out vec4 coloredFlow;&#xa;uniform sampler2D flowField;&#xa;uniform float scale;&#xa;uniform int symetric;&#xa;" name="genericFragHead"/>
  <string val="in vec2 texcoord;&#xa;&#xa;vec4 flow(in vec2 p) {&#xa;&#x9;vec4 d = texture(flowField,p);&#xa;&#x9;return vec4(d.xy*scale,d.zw);&#xa;}&#xa;&#xa;vec3 hsvToRgb(in float h,in float s,in float v) {&#xa;&#x9;vec3 rgb;&#xa;&#x9;int hi = int(floor(h/60.0))%6;&#xa;&#x9;float f = h/60.0 - floor(h/60.0);&#xa;&#x9;float p = v*(1.0-s);&#xa;&#x9;float q = v*(1.0-f*s);&#xa;&#x9;float t = v*(1.0-(1.0-f)*s);&#xa;&#xa;&#x9;if(hi==0) rgb = vec3(v,t,p);&#xa;&#x9;else if(hi==1) rgb = vec3(q,v,p);&#xa;&#x9;else if(hi==2) rgb = vec3(p,v,t);&#xa;&#x9;else if(hi==3) rgb = vec3(p,q,v);&#xa;&#x9;else if(hi==4) rgb = vec3(t,p,v);&#xa;&#x9;else rgb = vec3(v,p,q);&#xa;&#xa;&#x9;return rgb;&#xa;}&#xa;&#xa;void main() {&#xa;&#x9;const float eps = 1.-10;&#xa;&#x9;const float PI  = 3.14159265359;&#xa;&#x9;const float PI2 = 2.*PI;&#xa;&#xa;&#x9;vec4 f = flow(texcoord);&#xa;&#xa;&#x9;float gx = f.x;&#xa;&#x9;float gy = f.y;&#xa;&#x9;float ma = max(clamp(length(f.xy),0.,1.),eps);&#xa;&#xa;&#x9;gx = clamp(gx/ma,-1.,1.);&#xa;&#x9;gy = clamp(gy/ma,-1.,1.);&#xa;&#xa;&#x9;float h   = gy>0. ? acos(gx) : PI2-acos(gx);&#xa;&#x9;float den = symetric==1 ? PI : PI2;&#xa;&#xa;&#x9;h = (mod(h,den)/den)*360.;&#xa;&#x9;float s = ma;&#xa;&#x9;float v = 1.0;&#xa; &#xa;&#x9;coloredFlow = length(f.xy)&lt;eps ? vec4(vec3(1.),f.w) : vec4(hsvToRgb(h,s,v),f.w);&#xa;}&#xa;" name="genericFragBody"/>
  <string val="#version 410&#xa;&#xa;layout(vertices = 4) out;&#xa;uniform sampler2D flowField;&#xa;uniform float scale;&#xa;uniform int symetric;&#xa;" name="genericTessCHead"/>
  <string val="void main(void) {&#xa;&#x9;gl_TessLevelOuter[0] = 1;&#xa;&#x9;gl_TessLevelOuter[1] = 1;&#xa;&#x9;gl_TessLevelOuter[2] = 1;&#xa;&#x9;gl_TessLevelOuter[3] = 1;&#xa;&#x9;gl_TessLevelInner[0] = 1;&#xa;&#x9;gl_TessLevelInner[1] = 1;&#xa;&#x9;gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;&#xa;}&#xa;" name="genericTessCBody"/>
  <string val="#version 410&#xa;&#xa;uniform sampler2D flowField;&#xa;uniform float scale;&#xa;uniform int symetric;&#xa;" name="genericTessEHead"/>
  <string val="layout(quads,equal_spacing) in;&#xa;&#xa;void main() {&#xa;&#x9;vec4 p1 = mix(gl_in[0].gl_Position,gl_in[1].gl_Position,gl_TessCoord.x);&#xa;&#x9;vec4 p2 = mix(gl_in[3].gl_Position,gl_in[2].gl_Position,gl_TessCoord.x);&#xa;&#x9;gl_Position = mix(p1,p2,gl_TessCoord.y);&#xa;}&#xa;" name="genericTessEBody"/>
  <string val="#version 410&#xa;&#xa;layout(triangles) in;&#xa;uniform sampler2D flowField;&#xa;uniform float scale;&#xa;uniform int symetric;&#xa;" name="genericGeomHead"/>
  <string val="layout(triangle_strip, max_vertices = 3) out;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = gl_in[0].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[1].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[2].gl_Position; EmitVertex();&#xa;&#x9;EndPrimitive();&#xa;}" name="genericGeomBody"/>
  <vector2f name="genericTSize">
   <float val="1" name="0"/>
   <float val="1" name="1"/>
  </vector2f>
  <vector2f name="genericTOffset">
   <float val="0" name="0"/>
   <float val="0" name="1"/>
  </vector2f>
  <bool val="0" name="genericNeedMouse"/>
  <bool val="0" name="genericNeedKeyboard"/>
  <uint val="2" name="genericNbWidgets"/>
  <int val="0" name="genericWidgetType-0"/>
  <int val="1" name="genericWidgetView-0"/>
  <string val="scale" name="genericWidgetName-0"/>
  <bool val="1" name="genericWidgetKeyframed-0"/>
  <int val="1" name="genericWidgetType-1"/>
  <int val="2" name="genericWidgetView-1"/>
  <string val="symetric" name="genericWidgetName-1"/>
  <bool val="0" name="genericWidgetKeyframed-1"/>
 </IOData>
 <IOData name="nodeWidget-0">
  <uint val="2" name="nbChildren"/>
  <IOData name="childWidget-0">
   <bool val="1" name="floatAttribKeyframed"/>
   <float val="0" name="floatAttribMinVal"/>
   <float val="100" name="floatAttribMaxVal"/>
   <IOData name="floatAttribCurve">
    <float val="1" name="currentVal"/>
    <uint val="1" name="nbCurves"/>
    <IOData name="curve-0">
     <int val="0" name="interpType"/>
     <int val="0" name="leftType"/>
     <int val="0" name="rightType"/>
     <IOData name="interpolator">
      <uint val="1" name="nbPoints"/>
      <uint val="0" name="nbTangents"/>
      <vector2f name="controlPoint-0">
       <float val="0" name="0"/>
       <float val="1" name="1"/>
      </vector2f>
     </IOData>
    </IOData>
   </IOData>
   <uint val="0" name="nbChildren"/>
  </IOData>
  <IOData name="childWidget-1">
   <bool val="0" name="intAttribKeyframed"/>
   <int val="0" name="intAttribMinVal"/>
   <int val="1" name="intAttribMaxVal"/>
   <IOData name="intAttribCurve">
    <int val="0" name="currentVal"/>
    <uint val="1" name="nbCurves"/>
    <IOData name="curve-0">
     <int val="0" name="interpType"/>
     <int val="0" name="leftType"/>
     <int val="0" name="rightType"/>
     <IOData name="interpolator">
      <uint val="1" name="nbPoints"/>
      <uint val="0" name="nbTangents"/>
      <vector2f name="controlPoint-0">
       <float val="0" name="0"/>
       <float val="0" name="1"/>
      </vector2f>
     </IOData>
    </IOData>
   </IOData>
   <uint val="0" name="nbChildren"/>
  </IOData>
 </IOData>
 <vector2f name="nodeInputPos-0-0">
  <float val="56.32" name="0"/>
  <float val="28.16" name="1"/>
 </vector2f>
 <vector2f name="nodeOutputPos-0-0">
  <float val="56.32" name="0"/>
  <float val="28.16" name="1"/>
 </vector2f>
</Gratin>
