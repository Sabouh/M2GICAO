<Gratin type="pipeline">
 <int name="majorVersion" val="0"/>
 <int name="minorVersion" val="3"/>
 <IOData name="mainWindow">
  <IOData name="graphWidget">
   <IOData name="graph">
    <uint name="nbNodes" val="1"/>
    <string name="nodeStringId-0" val="imgGenericId"/>
    <uint name="nodeVersion-0" val="1"/>
    <string name="nodeName-0" val="init"/>
    <string name="nodePath-0" val="Generic/"/>
    <string name="nodeDesc-0" val="Generic node for image processing"/>
    <string name="nodeHelp-0" val="This node was designed to create custom shaders&#xa;The settings widget allows to modify input, output parameters&#xa;as well as the output image sizes.&#xa;&#xa;WARNING1: you will be able to modify the number of inputs/outputs&#xa;only if the node is entirely disconnected.&#xa;WARNING2: input/output names will not be modified if a custom node is created&#xa;from this node because these names should be edited directly in the setting widget&#xa;WARNING3: modifying the settings of a node will remove all previously&#xa;defined keyframes&#xa;&#xa;* Special data allows to modify the output image (using a multiple of&#xa;the input size, plus an offset vector&#xa;Check use mouse/keyboard if you want to interact with the mouse&#xa;&#xa;* Input data allows to add/remove/displace input data (only if disconnected)&#xa;&#xa;* Output data allows to add/remove/displace output data (only if disconnected)&#xa;&#xa;* Param data allows to add/remove parameters that will automatically be &#xa;included in your shader.&#xa;For each of them you may choose a proper name, type, and min/max/default values.&#xa;Check keyframes if you want your parameter to be accessible&#xa; through the animation widget&#xa;&#xa;In the node interface itself:&#xa;Source tab contains the head and body of your GLSL source (only the body is editable)&#xa;Params tab contains the defined widgets according to your setting choices&#xa;Log tab contains compilation errors&#xa;&#xa;Once your settings and source completed, click on apply to see the result&#xa;"/>
    <uint name="nodeId-0" val="0"/>
    <uint name="nodeGraphId-0" val="0"/>
    <vector2f name="nodePos-0">
     <float name="0" val="1833.34"/>
     <float name="1" val="-3734.7"/>
    </vector2f>
    <int name="nodeInputNameSize-0" val="0"/>
    <int name="nodeOutputNameSize-0" val="1"/>
    <string name="nodeOutputName-0-0" val="outBuffer0"/>
    <bool name="nodeHasWidget-0" val="1"/>
    <IOData name="node-0">
     <string name="genericGlslVersion" val="420"/>
     <string name="genericNodeName" val="init"/>
     <bool name="genericUseVertex" val="0"/>
     <bool name="genericUseTesselation" val="0"/>
     <bool name="genericUseGeometry" val="0"/>
     <bool name="genericUseFragment" val="1"/>
     <int name="genericOutFilter" val="9729"/>
     <int name="genericOutWrap" val="33071"/>
     <bool name="genericUseDepthTest" val="0"/>
     <bool name="genericUseBlending" val="0"/>
     <uint name="genericDepthFunc" val="513"/>
     <uint name="genericBlendSrc" val="1"/>
     <uint name="genericBlendDst" val="0"/>
     <vector4f name="genericBackground">
      <float name="0" val="0"/>
      <float name="1" val="0"/>
      <float name="2" val="0"/>
      <float name="3" val="0"/>
     </vector4f>
     <string name="genericVertHead" val="#version 420&#xa;&#xa;layout(location = 0) in vec2 vertex;&#xa;layout(location = 1) in vec2 coord;&#xa;uniform vec2 mouse;&#xa;"/>
     <string name="genericVertBody" val="out vec2 texcoord;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = vec4(vertex,0,1);&#xa;&#x9;texcoord    = coord;&#xa;}&#xa;"/>
     <string name="genericFragHead" val="#version 420&#xa;&#xa;layout(location = 0) out vec4 outBuffer0;&#xa;uniform vec2 mouse;&#xa;"/>
     <string name="genericFragBody" val="in vec2 texcoord;&#xa;in vec4 gl_FragCoord;&#xa;#define NUM_PLANS 5&#xa;#define NUM_SPHERES 1&#xa;#define NUM_COULEURS 6&#xa;precision highp float;&#xa;&#xa;//Camera&#xa;//defini par une position et 3 vecteurs (up,view,right)&#xa;struct Camera{&#xa;&#x9;vec3 e;//position de la camera&#xa;&#x9;vec3 u; // right&#xa;&#x9;vec3 v; // vecteur up&#xa;&#x9;vec3 w; //vecteur view direction vers la scene&#xa;};&#xa;&#xa;//Plan&#xa;struct Plane{&#xa;&#x9;vec3 n;//normal&#xa;&#x9;float d;//offset&#xa;};&#xa;&#xa;//Rayon&#xa;struct Ray{&#xa;&#x9;vec3 ro; //origin&#xa;&#x9;vec3 rd; //direction&#xa;};&#xa;&#xa;//Sphere&#xa;struct Sphere{&#xa;&#x9;vec3 o; //origin&#xa;     float r;//rayon&#xa;};&#xa;&#xa;&#xa;//attributs&#xa;Camera cam;&#xa;Plane murs[ NUM_PLANS ];&#xa;Sphere balles[NUM_SPHERES];&#xa;vec4 couleurs[NUM_COULEURS];&#xa;&#xa;&#xa;//initialisation de la caméra&#xa;void initCam(){&#xa;&#xa;&#x9;//souris normalisée&#xa;&#x9;vec2 m = mouse/512;&#xa;&#xa;&#x9;//position de la caméra&#xa;&#x9;//cam.e = vec3(1,1,1);&#xa;&#xa;&#x9;//position de la caméra contrôlée par la souris&#xa;&#x9;cam.e = vec3(m.x,m.y,2);&#xa;&#xa;&#x9;//direction vue (là où on regarde) , ici on regarde l'axe y&#xa;&#x9;cam.w = vec3(0,0,-1);&#xa;&#xa;&#x9;//direction up &#xa;&#x9;cam.v = vec3(0,1,0);&#xa;&#xa;&#x9;//on recalcule pour que tout soit orthogonal&#xa;&#x9;cam.u= cross(cam.w,cam.v);&#xa;&#x9;cam.v = cross(cam.u,cam.w);&#xa;}&#xa;&#xa;//initialisation des plans, ici 5 &quot;murs&quot;&#xa;void initPlans(){&#xa;&#x9;//Salle : Fond de la salle, Mur gauche , Sol de la salle, Mur droit, Plafond &#xa;&#x9;murs = Plane[](Plane(vec3(0,0,1),0), Plane(vec3(1,0,0),-1), Plane(vec3(0,1,0),-1),Plane(vec3(-1,0,0),1),Plane(vec3(0,1,0),1) );&#xa;&#xa;&#x9;//3 plans principaux Oxy , Oyz et Ozx &#xa;&#x9;//murs = Plane[](Plane(vec3(0,0,1),0), Plane(vec3(1,0,0),0), Plane(vec3(0,1,0),0) ); &#xa;&#xa;}&#xa;&#xa;//initialisation des spheres&#xa;void initSpheres(){&#xa;&#x9;//On place la sphère&#xa;&#x9;balles = Sphere[](Sphere(vec3(1.5,0,0.4),0.3) ) ;&#xa;}&#xa;&#xa;void initCouleur(){&#xa;&#x9;// COULEURS DIFFERENTES&#xa;&#x9;//[BLEU ; MAGENTA ; ROUGE ; JAUNE ; VERT ;CYAN]&#xa;&#x9;couleurs = vec4[](vec4(0,0,255,1), vec4(255,0,255,1), vec4(255,0,0,1), vec4(255,255,0,1), vec4(0,255,0,1),vec4(0,100,100,1));&#xa;}&#xa;&#xa;//Intersection&#xa;&#xa;void intersection(){&#xa;&#xa;&#x9;//On prend la position du pixel entre [-1 ; 1]&#xa;&#x9;vec2 pos =( gl_FragCoord.xy -(512/2) )/(512/2) ;&#xa;&#xa;&#x9;//generer un rayon avec la camera&#xa;&#x9;float D  = 1/(tan(3.14/4)); //radian&#xa;&#x9;Ray ray;&#xa;&#x9;ray.ro = cam.e;&#xa;&#x9;ray.rd = normalize(vec3(pos.x*cam.u+pos.y*cam.v+D*cam.w));&#xa;&#xa;&#x9;//variable&#xa;&#x9;Plane p;&#xa;&#x9;Sphere s;&#xa;&#xa;&#x9;float t,t1,t2;&#xa;&#x9;float tmin = 5000;&#xa;&#x9;int imin = -1;&#xa;&#x9;float a,b,c,det;&#xa;&#x9;//pr chaque objet de la scene&#xa;&#x9;for(int i=0;i&lt;(NUM_PLANS+NUM_SPHERES);i++){&#xa;&#x9;&#x9;//tester intersection entre rayon et objet&#xa;&#x9;&#x9;//si plan&#xa;&#x9;&#x9;if(i&lt;NUM_PLANS){&#xa;&#x9;&#x9;&#x9;p = murs[i];&#xa;&#x9;&#x9;&#x9;t = -( p.d + dot(ray.ro ,p.n)) /(dot( ray.rd ,p.n)) ; &#xa;&#x9;&#x9;}else{ // si sphere&#xa;&#x9;&#x9;&#x9;//On applique la formule&#xa;&#x9;&#x9;&#x9;s = balles[i%NUM_PLANS];&#xa;&#x9;&#x9;&#x9;a = dot(ray.rd,ray.rd);&#xa;&#x9;&#x9;&#x9;b = 2*dot(ray.ro - s.o,ray.rd);&#x9;&#x9;&#xa;&#x9;&#x9;&#x9;c = dot(ray.ro - s.o,ray.ro - s.o) - (s.r*s.r);&#xa;&#x9;&#x9;&#x9;det = sqrt((b*b)-4*a*c);&#xa;&#x9;&#x9;&#x9;if(det>0){&#xa;&#x9;&#x9;&#x9;&#x9;t1 = (-b + det)/(2*a);&#xa;&#x9;&#x9;&#x9;&#x9;t2 = (-b - det)/(2*a);&#xa;&#x9;&#x9;&#x9;&#x9;if(t1 &lt; t2){&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;t = t1;&#xa;&#x9;&#x9;&#x9;&#x9;}else{&#xa;&#x9;&#x9;&#x9;&#x9;&#x9;t = t2;&#xa;&#x9;&#x9;&#x9;&#x9;}&#xa;&#x9;&#x9;&#x9;}&#xa;&#x9;&#x9;}&#xa;&#x9;&#x9;//si distance t est positive et que c'est la distance minimale (cad pixel au premier plan)&#xa;&#x9;&#x9;if(t>0 &amp;&amp; t&lt;tmin){&#xa;&#x9;&#x9;&#x9;imin = i;&#xa;&#x9;&#x9;&#x9;tmin = t;&#xa;&#x9;&#x9;}&#xa;&#x9;}&#xa;&#x9;//calculer normale de l'objet intersecté&#xa;&#x9;//calculer la couleur du pixel (affichage normale ou profondeur)&#xa;&#x9;//on colore ce pixel là&#xa;&#x9;if(imin != -1){&#xa;&#x9;&#x9;//gl_FragDepth&#xa;&#x9;&#x9;if(imin&lt;NUM_PLANS){&#xa;&#x9;&#x9;&#x9;//couleurs + profondeur&#xa;&#x9;&#x9;&#x9;outBuffer0 =vec4( (tmin/512)*couleurs[imin].xyz, 1);&#xa;&#x9;&#x9;&#x9;//normale&#xa;&#x9;&#x9;&#x9;//outBuffer0 = vec4(murs[imin].n.xyz,1);&#xa;&#x9;&#x9;}else{&#xa;&#x9;&#x9;&#x9;//couleurs + profondeur&#xa;&#x9;&#x9;&#x9;outBuffer0 = vec4( (tmin/512)*couleurs[imin].xyz, 1);&#xa;&#x9;&#x9;}&#xa;&#x9;}&#xa;&#xa;}&#xa;&#xa;//Main&#xa;void main() {&#xa;&#x9;outBuffer0 = vec4(255,255,255,1);&#xa;&#x9;initCouleur();&#xa;&#x9;initCam();&#xa;&#x9;initPlans();&#xa;&#x9;initSpheres();&#xa;&#x9;intersection();&#xa;}&#xa;&#xa;"/>
     <string name="genericTessCHead" val="#version 420&#xa;&#xa;layout(vertices = 4) out;&#xa;uniform vec2 mouse;&#xa;"/>
     <string name="genericTessCBody" val="void main(void) {&#xa;&#x9;gl_TessLevelOuter[0] = 1;&#xa;&#x9;gl_TessLevelOuter[1] = 1;&#xa;&#x9;gl_TessLevelOuter[2] = 1;&#xa;&#x9;gl_TessLevelOuter[3] = 1;&#xa;&#x9;gl_TessLevelInner[0] = 1;&#xa;&#x9;gl_TessLevelInner[1] = 1;&#xa;&#x9;gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;&#xa;}&#xa;"/>
     <string name="genericTessEHead" val="#version 420&#xa;&#xa;uniform vec2 mouse;&#xa;"/>
     <string name="genericTessEBody" val="layout(quads,equal_spacing) in;&#xa;&#xa;void main() {&#xa;&#x9;vec4 p1 = mix(gl_in[0].gl_Position,gl_in[1].gl_Position,gl_TessCoord.x);&#xa;&#x9;vec4 p2 = mix(gl_in[3].gl_Position,gl_in[2].gl_Position,gl_TessCoord.x);&#xa;&#x9;gl_Position = mix(p1,p2,gl_TessCoord.y);&#xa;}&#xa;"/>
     <string name="genericGeomHead" val="#version 420&#xa;&#xa;layout(triangles) in;&#xa;uniform vec2 mouse;&#xa;"/>
     <string name="genericGeomBody" val="layout(triangle_strip, max_vertices = 3) out;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = gl_in[0].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[1].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[2].gl_Position; EmitVertex();&#xa;&#x9;EndPrimitive();&#xa;}"/>
     <vector2f name="genericTSize">
      <float name="0" val="0"/>
      <float name="1" val="0"/>
     </vector2f>
     <vector2f name="genericTOffset">
      <float name="0" val="512"/>
      <float name="1" val="512"/>
     </vector2f>
     <bool name="genericNeedMouse" val="1"/>
     <bool name="genericNeedKeyboard" val="0"/>
     <uint name="genericNbWidgets" val="0"/>
    </IOData>
    <IOData name="nodeWidget-0">
     <uint name="nbChildren" val="1"/>
     <IOData name="childWidget-0">
      <bool name="vector2iAttribKeyframed" val="1"/>
      <vector2i name="vector2iAttribMinVal">
       <int name="0" val="-10000"/>
       <int name="1" val="-10000"/>
      </vector2i>
      <vector2i name="vector2iAttribMaxVal">
       <int name="0" val="10000"/>
       <int name="1" val="10000"/>
      </vector2i>
      <IOData name="vector2iAttribCurve">
       <vector2i name="currentVal">
        <int name="0" val="361"/>
        <int name="1" val="269"/>
       </vector2i>
       <uint name="nbCurves" val="2"/>
       <IOData name="curve-0">
        <int name="interpType" val="0"/>
        <int name="leftType" val="0"/>
        <int name="rightType" val="0"/>
        <IOData name="interpolator">
         <uint name="nbPoints" val="1"/>
         <uint name="nbTangents" val="0"/>
         <vector2f name="controlPoint-0">
          <float name="0" val="0"/>
          <float name="1" val="361"/>
         </vector2f>
        </IOData>
       </IOData>
       <IOData name="curve-1">
        <int name="interpType" val="0"/>
        <int name="leftType" val="0"/>
        <int name="rightType" val="0"/>
        <IOData name="interpolator">
         <uint name="nbPoints" val="1"/>
         <uint name="nbTangents" val="0"/>
         <vector2f name="controlPoint-0">
          <float name="0" val="0"/>
          <float name="1" val="269"/>
         </vector2f>
        </IOData>
       </IOData>
      </IOData>
      <uint name="nbChildren" val="0"/>
     </IOData>
    </IOData>
    <vector2f name="nodeOutputPos-0-0">
     <float name="0" val="56.32"/>
     <float name="1" val="28.16"/>
    </vector2f>
   </IOData>
   <float name="scale" val="2.86193"/>
   <vector2f name="offset">
    <float name="0" val="2594.43"/>
    <float name="1" val="-3520.91"/>
   </vector2f>
   <IOData name="animation">
    <uint name="firstFrame" val="0"/>
    <uint name="lastFrame" val="99"/>
    <uint name="currentFrame" val="0"/>
    <uint name="fps" val="24"/>
   </IOData>
  </IOData>
  <IOData name="animationWidget">
   <vector2i name="animationWidgetSize">
    <int name="0" val="1766"/>
    <int name="1" val="351"/>
   </vector2i>
   <IOData name="timelineWidget"/>
  </IOData>
  <IOData name="nodeListWidget"/>
  <IOData name="interactionWidget">
   <float name="scale" val="1.3699"/>
   <vector2f name="offset">
    <float name="0" val="245.138"/>
    <float name="1" val="248.85"/>
   </vector2f>
  </IOData>
  <IOData name="nodeInterfaceWidget"/>
 </IOData>
</Gratin>
